3047|11|Public
5|$|Loki Games {{worked on}} a Linux version of the game, but the company went out of {{business}} before releasing it. The <b>OpenGL</b> layer they wrote for the port, however, was sent out to Windows gamers through an online patch, which also makes the game far more compatible with Wine on Linux {{than it would have been}} with only Direct3D.|$|E
5|$|On the {{hardware}} driver side, for instance the UniATA project provides Serial ATA drivers for ReactOS. The project has also experimented with using the FullFAT library in its rewrite of its FAT Installable File System. ReactOS {{makes use of}} the USB stack from Haiku both as a reference and {{as a foundation for}} its USB support. Mesa 3D provides <b>OpenGL</b> rendering.|$|E
5|$|The {{developers}} aim to {{make the}} kernel and usermode APIs more compatible with Windows NT version 5.2 (Windows Server 2003) and to add support for more applications and hardware with plans to target newer versions of Windows as development matures. DirectX support is undertaken through ReactX, an in-house implementation. 2D hardware-accelerated rendering is done natively, while other drawing functionality is redirected to <b>OpenGL</b> as a stopgap solution.|$|E
5|$|The macOS client debuted on June 23, 2015 to {{coincide}} with the release of the first expansion pack. The port was handled by TransGaming. Unlike console and Microsoft Windows PC versions of the expansion, the Mac release is only available in a two-in-one bundle containing the base game and the Heavensward expansion, titled Final Fantasy XIV Online. Current players of other versions of the game, including Mac players running the PC version via Boot Camp, are required to purchase this bundle in order to play using the native Mac client. On July 3, 2015, Square Enix suspended sales of the Mac version because of widespread reports of poor technical performance and offered refunds to those who purchased it. Yoshida observed that the performance issues could be attributed to difficulties in transposing the game from Microsoft's proprietary DirectX graphical rendering libraries to <b>OpenGL</b> as well as a clerical error resulting in publishing the wrong minimum system requirements, both compounded by the hectic work schedule demanded by the release of an expansion pack. After new rounds of testing and optimization, sales of the Mac version resumed on February 23, 2016, accompanying the release of Patch 3.2.|$|E
5|$|After {{the first}} year of development, Gas Powered Games found that {{they were not going to}} be able to finish the game within the planned two years; not only was the {{seamless}} world without loading screens harder to create than they had thought, but, according to lead developer Bartosz Kijanka, they had been overambitious in choosing how many innovative features they could put into the game's custom engine, such as the wide range through which the virtual camera system could zoom in and out. Other features supported and later dropped included allowing up to ten characters at once—and therefore maintaining up to ten areas of the single-player world—instead of the final maximum of eight, and a weather system that included wind blowing projectiles off course. According to Kijanka, the developers also spent a lot of time changing technologies mid-development, such as building a custom animation editor before moving to a licensed one, and starting with the <b>OpenGL</b> graphics library only to switch to Direct3D. As a result, the team was required to work 12–14 hour days and weekends for most of the development time in order to complete the game within four years. In a 2011 interview, Taylor stated that in retrospect the final cost in development time of the seamless world may have been too high, and also that the team tried to make too large of a game for their budget; he believed that a game with closer to 35 hours of playtime instead of 70 would have been a better and more polished experience given their constraints.|$|E
25|$|In 1992, SGI led the {{creation}} of the <b>OpenGL</b> Architecture Review Board (<b>OpenGL</b> ARB), the group of companies that would maintain and expand the <b>OpenGL</b> specification in the future.|$|E
25|$|<b>OpenGL</b> 3.2 further {{built on}} the deprecation {{mechanisms}} introduced by <b>OpenGL</b> 3.0, by dividing the specification into a core profile and compatibility profile. Compatibility contexts include the previously-removed fixed-function APIs, equivalent to the ARB_compatibility extension released alongside <b>OpenGL</b> 3.1, while core contexts do not. <b>OpenGL</b> 3.2 also included an upgrade to GLSL version 1.50.|$|E
25|$|<b>OpenGL</b> 2.1 {{required}} implementations {{to support}} version 1.20 of the <b>OpenGL</b> Shading Language.|$|E
25|$|<b>OpenGL</b> 1.2.1 {{was a minor}} release, {{appearing}} {{only seven}} months {{after the release of}} version 1.2. It introduced the concept of ARB extensions, and defined the extension (in <b>OpenGL</b> 1.3 table), without yet incorporating it into the <b>OpenGL</b> core specification.|$|E
25|$|In July 2006, the <b>OpenGL</b> Architecture Review Board {{voted to}} {{transfer}} {{control of the}} <b>OpenGL</b> API standard to the Khronos Group.|$|E
25|$|In {{addition}} to being language-independent, <b>OpenGL</b> is also cross-platform. The specification says nothing {{on the subject of}} obtaining, and managing an <b>OpenGL</b> context, leaving this as a detail of the underlying windowing system. For the same reason, <b>OpenGL</b> is purely concerned with rendering, providing no APIs related to input, audio, or windowing.|$|E
25|$|<b>OpenGL</b> ES 3.1 API and shader {{compatibility}} – {{to enable}} the easy development and execution of the latest <b>OpenGL</b> ES applications on desktop systems.|$|E
25|$|The {{earliest}} {{versions of}} <b>OpenGL</b> were released with a companion library called the <b>OpenGL</b> Utility Library (GLU). It provided simple, useful features which {{were unlikely to}} be supported in contemporary hardware, such as tessellating, and generating mipmaps and primitive shapes. The GLU specification was last updated in 1998 and depends on <b>OpenGL</b> features which are now deprecated.|$|E
25|$|On January 2, 2006, SUSE {{developer}} David Reveman announced Xgl, an X server architecture {{designed to}} take advantage of modern graphics cards via their <b>OpenGL</b> drivers, layered on top of <b>OpenGL</b> via glitz. Compiz, one of the first compositing window managers for the X Window System that is able {{to take advantage of}} this <b>OpenGL</b> acceleration, was also released.|$|E
25|$|The current {{production}} version (1.0.x) implements <b>OpenGL</b> ES 2.0 and EGL 1.4, {{claiming to}} pass the conformance tests for both. Work has started on the future <b>OpenGL</b> ES 3.0 version, for the newer Direct3D 11 backend.|$|E
25|$|As in <b>OpenGL</b> 3.0, {{this version}} of <b>OpenGL</b> {{contains}} {{a high number of}} fairly inconsequential extensions, designed to thoroughly expose the abilities of Direct3D 11-class hardware. Only the most influential extensions are listed below.|$|E
25|$|Given that {{creating}} an <b>OpenGL</b> context {{is quite a}} complex process, and given that it varies between operating systems, automatic <b>OpenGL</b> context creation has become a common feature of several game-development and user-interface libraries, including SDL, Allegro, SFML, FLTK, and Qt. A few libraries have been designed solely to produce an OpenGL-capable window. The first such library was <b>OpenGL</b> Utility Toolkit (GLUT), later superseded by freeglut. GLFW is a newer alternative.|$|E
25|$|In {{addition}} to the features required by the core API, graphics processing unit (GPU) vendors may provide additional functionality {{in the form of}} extensions. Extensions may introduce new functions and new constants, and may relax or remove restrictions on existing <b>OpenGL</b> functions. Vendors can use extensions to expose custom APIs without needing support from other vendors or the Khronos Group as a whole, which greatly increases the flexibility of <b>OpenGL.</b> All extensions are collected in, and defined by, the <b>OpenGL</b> Registry.|$|E
25|$|The {{first version}} of <b>OpenGL,</b> version 1.0, was {{released}} in January 1992 by Mark Segal and Kurt Akeley. Since then, <b>OpenGL</b> has occasionally been extended by releasing {{a new version of}} the specification. Such releases define a baseline set of features which all conforming graphics cards must support, and against which new extensions can more easily be written. Each new version of <b>OpenGL</b> tends to incorporate several extensions which have widespread support among graphics-card vendors, although the details of those extensions may be changed.|$|E
25|$|A {{book about}} {{interfacing}} <b>OpenGL</b> with Microsoft Windows.|$|E
25|$|<b>OpenGL</b> 3.0 {{introduced}} a deprecation mechanism to simplify future {{revisions of the}} API. Certain features, marked as deprecated, could be completely disabled by requesting a forward-compatible context from the windowing system. <b>OpenGL</b> 3.0 features could still be accessed alongside these deprecated features, however, by requesting a full context.|$|E
25|$|Mesa 3D is an {{open-source}} {{implementation of}} <b>OpenGL.</b> It can do pure software rendering, {{and it may}} also use hardware acceleration on BSD, Linux, and other platforms {{by taking advantage of}} the Direct Rendering Infrastructure. As of version 13.0, it implements version 4.5 of the <b>OpenGL</b> standard.|$|E
25|$|A {{book about}} X11 {{interfacing}} and <b>OpenGL</b> Utility Toolkit (GLUT).|$|E
25|$|Before {{the release}} of <b>OpenGL</b> 3.0, the new {{revision}} had the codename Longs Peak. At {{the time of its}} original announcement, Longs Peak was presented as the first major API revision in OpenGL's lifetime. It consisted of an overhaul to the way that <b>OpenGL</b> works, calling for fundamental changes to the API.|$|E
25|$|Support for <b>OpenGL</b> 2.1 for Linux guest virtual machines.|$|E
25|$|Silicon Graphics Inc., (SGI) started {{developing}} <b>OpenGL</b> in 1991 {{and released}} it in January 1992; applications use it {{extensively in the}} fields of computer-aided design (CAD), virtual reality, scientific visualization, information visualization, flight simulation, and video games. Since 2006 <b>OpenGL</b> has been managed by the non-profit technology consortium Khronos Group.|$|E
25|$|OpenTK, a managed binding for <b>OpenGL,</b> OpenCL and OpenAL.|$|E
25|$|The {{design of}} GLSL was notable for making {{relatively}} few {{concessions to the}} limits of the hardware then available. This hearkened back to the earlier tradition of <b>OpenGL</b> setting an ambitious, forward-looking target for 3D accelerators rather than merely tracking the state of currently available hardware. The final <b>OpenGL</b> 2.0 specification includes support for GLSL.|$|E
25|$|<b>OpenGL</b> Utility Toolkit (GLUT) – An old {{windowing}} handler, {{no longer}} maintained.|$|E
25|$|<b>OpenGL</b> is an {{evolving}} API. New {{versions of the}} <b>OpenGL</b> specifications are regularly released by the Khronos Group, each of which extends the API to support various new features. The details of each version are decided by consensus between the Group's members, including graphics card manufacturers, operating system designers, and general technology companies such as Mozilla and Google.|$|E
25|$|Essentially a {{hard-copy}} printout of the Unix manual (man) {{pages for}} <b>OpenGL.</b>|$|E
25|$|Includes a poster-sized {{fold-out}} diagram {{showing the}} structure of an idealised <b>OpenGL</b> implementation.|$|E
25|$|<b>OpenGL</b> 2.0 was {{originally}} conceived by 3Dlabs to address concerns that <b>OpenGL</b> was stagnating and lacked a strong direction. 3Dlabs proposed {{a number of}} major additions to the standard. Most of these were, at the time, rejected by the ARB or otherwise never came to fruition in the form that 3Dlabs proposed. However, their proposal for a C-style shading language was eventually completed, resulting in the current formulation of the <b>OpenGL</b> Shading Language (GLSL or GLslang). Like the assembly-like shading languages it was replacing, it allowed replacing the fixed-function vertex and fragment pipe with shaders, though this time written in a C-like high-level language.|$|E
25|$|Tao (superseded by OpenTK), a {{collection}} of graphics and gaming bindings (<b>OpenGL,</b> SDL, GLUT, Cg).|$|E
25|$|These toolkits are {{designed}} to create and manage <b>OpenGL</b> windows, and manage input, but little beyond that.|$|E
25|$|<b>OpenGL</b> 4.0 was {{released}} alongside version 3.3. It {{was designed for}} hardware able to support Direct3D 11.|$|E
