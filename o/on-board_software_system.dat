3|10000|Public
40|$|This paper {{presents}} a safety concept for the <b>on-board</b> <b>software</b> <b>system</b> of the UPMSat- 2 experimental satellite. Subsystems with different criticality levels {{are assigned to}} different partitions in a partitioned software architecture. The architecture is based on XtratuM, an open-source virtualization kernel, and ORK+, an open-source real-time kernel for high- integrity systems. The safety requirements of the system are analysed, and a safety concept is developed based on the partitioned software architecture. The properties of the implementation resulting from the approach are discussed, and guidelines for future developments are proposed...|$|E
40|$|The {{ground based}} {{demonstration}} of the extensive extravehicular activity (EVA) Retriever, a voice-supervised, intelligent, free flying robot, is designed to evaluate the capability to retrieve objects (astronauts, equipment, and tools) which have accidentally separated from the Space Station. The major objective of the EVA Retriever Project is to design, develop, and evaluate an integrated robotic hardware and <b>on-board</b> <b>software</b> <b>system</b> which autonomously: (1) performs system activation and check-out; (2) searches for and acquires the target; (3) plans and executes a rendezvous while continuously tracking the target; (4) avoids stationary and moving obstacles; (5) reaches for and grapples the target; (6) returns to transfer the object; and (7) returns to base...|$|E
40|$|The {{ground-based}} {{demonstration of}} EVA Retriever, a voice-supervised, intelligent, free-flying robot, {{is designed to}} evaluate the capability to retrieve objects (astronauts, equipment, and tools) which have accidentally separated from the Space Station. The major objective of the EVA Retriever Project is to design, develop, and evaluate an integrated robotic hardware and <b>on-board</b> <b>software</b> <b>system</b> which autonomously: (1) performs system activation and check-out, (2) searches for and acquires the target, (3) plans and executes a rendezvous while continuously tracking the target, (4) avoids stationary and moving obstacles, (5) reaches for and grapples the target, (6) returns to transfer the object, and (7) returns to base. 1...|$|E
40|$|Whenever a {{spacecraft}} is launched {{it is essential}} that the algorithms in the <b>on-board</b> <b>software</b> <b>systems</b> and at ground control are efficient and reliable over extended periods of time. Geometric numerical integrators, and in particular variational integrators, have both these characteristics. In "Numerics of Spacecraft Dynamics" new numerical integrators are presented and analysed in depth. These algorithms have been designed specifically for the dynamics of spacecraft and artificial satellites in Earth orbits. Full analytical solutions to a class of integrable deformations of the two-body problem in classical mechanics are derived, and a systematic method to compute variational integrators to arbitrary order with a computer algebra system is introduced...|$|R
5000|$|DRAKON (Dragon), a SDL- and AADL-influenced visual 2D {{programming}} language designed {{for developing the}} <b>on-board</b> hard real-time <b>software</b> <b>system</b> for automatic flight and landing of the Soviet/Russian Buran (Snowstorm) orbiting spacecraft ...|$|R
40|$|Modern aircraft, both piloted {{fly-by-wire}} {{commercial aircraft}} {{as well as}} UAVs, more and more depend on highly complex safety critical <b>software</b> <b>systems</b> with many sensors and computer-controlled actuators. Despite careful design and V&V of the software, severe incidents have happened due to malfunctioning software. In this paper, we discuss the use of Bayesian networks (BNs) to monitor {{the health of the}} <b>on-board</b> <b>software</b> and sensor <b>system,</b> and to perform advanced on-board diagnostic reasoning. We will focus on the approach to develop reliable and robust health models for the combined <b>software</b> and sensor <b>systems...</b>|$|R
40|$|This paper {{describes}} {{a case study}} in WCET analysis of an <b>on-board</b> spacecraft <b>software</b> <b>system.</b> The attitude control system of UPMSat- 2, an experimental micro-satellite which is scheduled to be launched in 2013, is used for an experiment on analysing the worst-case execution time of code automatically generated from a Simulink model. In order to properly test the code, a hardware-in-the-loop configuration with a simulation model of the spacecraft environment {{has been used as a}} test bench. The code has been analysed with RapiTime, with some modifications to the original instrumentation routines, in order to take into account the particularities of the test configuration. Results from the experiment are described and commented in the paper...|$|R
40|$|Modern {{aircraft}} — both piloted fly-by-wire {{commercial aircraft}} {{as well as}} UAVs — more and more depend on highly complex safety critical <b>software</b> <b>systems</b> with many sensors and computer-controlled actuators. Despite careful design and V 2 ̆ 6 V of the software, severe incidents have happened due to malfunctioning software. In this paper, we discuss the use of Bayesian networks to monitor {{the health of the}} <b>on-board</b> <b>software</b> and sensor <b>system,</b> and to perform advanced on-board diagnostic reasoning. We focus on the development of reliable and robust health models for combined <b>software</b> and sensor <b>systems,</b> with application to guidance, navigation, and control (GN 2 ̆ 6 C). Our Bayesian network-based approach is illustrated for a simplified GN 2 ̆ 6 C system implemented using the open source real-time operating system SEK/Trampoline. We show, using scenarios with injected faults, that our approach is able to detect and diagnose faults in <b>software</b> and sensor <b>systems...</b>|$|R
40|$|The Deep Space One (DS 1) mission, {{scheduled}} {{to fly in}} 1998, {{will be the first}} spacecraft to feature an on-board planner. The planner is part of an artificial intelligence based control architecture that comprises a planner/scheduler, a plan execution engine, and a model-based fault diagnosis and reconfiguration engine. This autonomy architecture reduces mission costs and increases mission quality by enabling highlevel commanding, robust fault responses, and opportunistic responses to serendipitous events. This paper describes the on-board planning and scheduling component of the DS 1 autonomy architecture. 1. INTRODUCTION The first mission of the New Millennium program (NMP) [...] -Deep Space One (DS 1), to launch in 1998 [...] -will feature an experimental <b>on-board</b> autonomy <b>software</b> <b>system,</b> the Remote Agent (RA). RA is an artificial intelligence based control system derived from the NewMaap technology demonstration [1]. RA has three components: the Executive (EXEC) [2], the Planner/Scheduler (P [...] ...|$|R
40|$|This paper {{presents}} the integrated approach toward failure detection, isolation, and recovery/reconfiguration {{to be used}} for the Space Station Freedom External Active Thermal Control System (EATCS). The on-board and on-ground diagnostic capabilities of the EATCS are discussed. Time and safety critical features, as well as noncritical failures, and the detection coverage for each provided by existing capabilities are reviewed. The allocation of responsibility between <b>on-board</b> <b>software</b> and ground-based <b>systems,</b> to be shown during ground testing at the Johnson Space Center, is described. Failure isolation capabilities allocated to the ground include some functionality originally found on orbit but moved to the ground to reduce on-board resource requirements. Complex failures requiring the analysis of multiple external variables, such as environmental conditions, heat loads, or station attitude, are also allocated to ground personnel...|$|R
40|$|The Large Observatory for X-ray Timing (LOFT) {{is one of}} {{the four}} {{candidate}} ESA M 3 missions considered for launch in the time-frame of 2022. It is specifically designed to perform fast X-ray timing and probe the status of the matter near black holes and neutron stars. The LOFT scientific payload consists of a Large Area Detector and a Wide Field Monitor. The LAD is a 10 m^ 2 -class pointed instrument with high spectral (200 eV @ 6 keV) and timing (< 10 μs) resolution over the 2 - 80 keV range. It is designed to observe persistent and transient X-ray sources with a very large dynamic range from a few mCrab up to an intensity of 15 Crab. An unprecedented large throughput (280. 000 cts/s from the Crab) is achieved with a segmented detector, making pile-up and dead-time, often worrying or limiting focused experiments, secondary issues. We present the on-board data handling concept that follows the highly segmented and hierarchical structure of the instrument from the front-end electronics to the <b>on-board</b> <b>software.</b> The <b>system</b> features customizable observation modes ranging from event-by-event data for sources below 0. 5 Crab to individually adjustable time resolved spectra for the brighter sources. On-board lossless data compression will be applied before transmitting the data to ground. Comment: Proceedings of SPIE, Vol. 8443, Paper No. 8443 - 207, 201...|$|R
40|$|Nowadays space {{activities}} {{are characterized by}} increased constraints in terms of on-board computing power and functional complexity combined with reduction of costs and schedule. This scenario necessarily originates impacts on the <b>on-board</b> <b>software</b> with particular emphases to the interfaces between <b>on-board</b> <b>software</b> and system/mission level requirements. The questions are: How can the effectiveness of Space <b>System</b> <b>Software</b> design be improved? How can we increase sophistication {{in the area of}} autonomy and failure tolerance, maintaining the necessary quality with acceptable risks?...|$|R
40|$|Panel Session at the International Symposium on Software Reliability Engineering 1993, Saturday: 6 November 1993, 0830 - 1000 and 1030 - 1200 The NASA Space Shuttle <b>on-board</b> <b>software</b> {{is one of}} the nation’s most safety-critical <b>software</b> <b>systems.</b> The {{process which}} {{produces}} this software has been rated at maturity level five. Among the quality assurance methods that are used to ensure the software is free of safetycritical faults is the use of reliability modelling and prediction...|$|R
40|$|AbstractSoftware defects {{classification}} is {{the basis}} for effective management of software defects. Current air <b>on-board</b> <b>software</b> testing classification GJB 437 is too easy, coding defects classification in other software defects classification does not meet our air <b>on-board</b> <b>software</b> code review facts. The deficiencies of existing classifications of software defects are analyzed. And a classification for air <b>on-board</b> <b>software</b> code defects is presented. This classification is verified and completed by investigating the historical code defects of air <b>on-board</b> <b>software.</b> The revised classification has covered selected historical defects perfectly. The results of verification show that the revised classification of code defects can guide defects management effectively. At the same time, defects database is established using typical air <b>on-board</b> <b>software</b> code defects. Defects management is implemented based on defects database, guiding software defects detection and prevention...|$|R
40|$|Increasingly, Department of Defense (DoD) weapon {{systems are}} {{becoming}} more software dependent. The future holds a ten-fold increase {{in the amount of}} <b>on-board</b> <b>software</b> in military <b>systems.</b> <b>Software</b> will provide more functionality and there will be more of it. The growth in the amount of fielded software has increased the requirements for software support services. It is estimated that more than 70 % of the DoD expenditure for software is for what is commonly referred to as post deployment software support (PDSS), i. e., software maintenance of fielded <b>system</b> <b>software.</b> This thesis examines the impact of the declining defense budget and personnel reductions on Army software support activities, and the potential effect on operational systems. A secondary question was to review what is involved in PDSS support and what missions the PDSS centers perform. During this research the PDSS centers at CECOM and MICOM were examined. They provide 'cradle to grave' software support. While both PDSS centers have experienced a constant {{growth in the number of}} systems they support, the number of people they have on hand has actually decreased. At the same time their budgets have not increased proportionately to their increased workload. Support for some systems has been terminated because of the cut backs. Continued budget cuts could jeopardize their ability to provide support to many systems in the future[URL] Army (USA) autho...|$|R
40|$|Abstract—Despite their size, small {{spacecraft}} have highly com-plex architectures {{with many}} sensors and computer-controlled actuators. At the same time, size, weight, and budget constraints often dictate that small spacecraft are designed as single-string systems, {{which means that}} there are no or few redundant systems. Thus, all components, including software, must operate as reliably. Faults, if present, must be detected as early as possible to enable (usually limited) forms of mitigation. Telemetry bandwidth for such spacecraft is usually very limited. Therefore, fault detection and diagnosis must be performed on-board. Further restrictions include low computational power and small memory. In this paper, we discuss the use of Bayesian networks (BNs) to monitor the health of <b>on-board</b> <b>software</b> and sensor <b>systems,</b> and to perform advanced on-board diagnostic reasoning. Advanced compilation techniques are used to obtain a compact SSHM (Software and Sensor Health Management) system with a powerful reasoning engine, which can run in an embedded software environment and is amenable to V&V. We successfully demonstrate our approach using an OSEK-compliant operating system kernel, and discuss in detail several nominal and fault scenarios for a small satellite simulation with a simple bang-bang controller. Index Terms—Health Management, fault detection and diag-nosis, Bayesian network I...|$|R
40|$|Despite their size, small {{spacecraft}} have {{highly complex}} architectures with many sensors and computer-controlled actuators. At the same time, size, weight, and budget constraints often dictate that small spacecraft are designed as single-string systems, {{which means that}} there are no or few redundant systems. Thus, all components, including software, must operate as reliably. Faults, if present, must be detected as early as possible to enable (usually limited) forms of mitigation. Telemetry bandwidth for such spacecraft is usually very limited. Therefore, fault detection and diagnosis must be performed on-board. Further restrictions include low computational power and small memory. In this paper, we discuss the use of Bayesian networks (BNs) to monitor the health of <b>on-board</b> <b>software</b> and sensor <b>systems,</b> and to perform advanced on-board diagnostic reasoning. Advanced compilation techniques are used to obtain a compact SSHM (Software and Sensor Health Management) system with a powerful reasoning engine, which can run in an embedded software environment and is amenable to V 2 ̆ 6 V. We successfully demonstrate our approach using an OSEK-compliant operating system kernel, and discuss in detail several nominal and fault scenarios for a small satellite simulation with a simple bangbang controller...|$|R
50|$|ER7: The {{real-time}} {{performance of}} the existing <b>on-board</b> <b>software</b> must be maintained.|$|R
40|$|New {{air traffic}} {{management}} concepts distribute the duty of traffic separation among system participants. As a consequence, these concepts have a greater dependency and rely heavily on <b>on-board</b> <b>software</b> and hardware <b>systems.</b> One example of a new on-board capability in a distributed {{air traffic management}} system is air traffic conflict detection and resolution (CD&R). Traditional methods for safety assessment such as human-in-the-loop simulations, testing, and flight experiments may not be sufficient for this highly distributed system as the set of possible scenarios is too large to have a reasonable coverage. This paper proposes a new method for the safety assessment of avionics systems that makes use of formal methods to drive the development of critical systems. As {{a case study of}} this approach, the mechanical veri. cation of an algorithm for air traffic conflict resolution and recovery called RR 3 D is presented. The RR 3 D algorithm uses a geometric optimization technique to provide a choice of resolution and recovery maneuvers. If the aircraft adheres to these maneuvers, they will bring the aircraft out of conflict and the aircraft will follow a conflict-free path to its original destination. Veri. cation of RR 3 D is carried out using the Prototype Verification System (PVS) ...|$|R
40|$|We {{present the}} <b>software</b> <b>system</b> {{used to control}} and operate the South Pole Telescope. The South Pole Telescope is a 10 -meter millimeter-wavelength {{telescope}} designed to measure anisotropies in {{the cosmic microwave background}} (CMB) at arcminute angular resolution. In the austral summer of 2011 / 12, the SPT was equipped with a new polarization-sensitive camera, which consists of 1536 transition-edge sensor bolometers. The bolometers are read out using 36 independent digital frequency multiplexing () readout boards, each with its own embedded processors. These autonomous boards control and read out data from the focal plane with <b>on-board</b> <b>software</b> and firmware. An overall control <b>software</b> <b>system</b> running on a separate control computer controls the boards, the cryostat and all other aspects of telescope operation. This control software collects and monitors data in real-time, and stores the data to disk for transfer to the United States for analysis...|$|R
40|$|This paper {{presents}} {{our vision}} for architecture {{and development of}} spacecraft <b>on-board</b> <b>software</b> composed of well-defined building blocks called software components. This vision is derived from our work in the DisCo and COrDeT studies funded by ESA and fits within the <b>on-board</b> <b>software</b> harmonisation carried out by ESA. The paper is focused on software architecture and corresponding engineering process which would leverage software reuse across different space missions and reduce software development and integration costs. ...|$|R
40|$|Satellites are {{sophisticated}} and therefore complicated constructs that require interdisciplinary teamwork of various experts of different academic disciplines. The integration of specific payload components, like scientific experiments, in the <b>on-board</b> <b>software</b> {{of the satellite}} is very challenging. The domain expert, {{as the owner of}} the payload component, possesses detailed insights on his or her component, but lacks sufficient programming skills to implement it in the <b>on-board</b> <b>software.</b> The rogrammer is able to write proper code for the onboard software, but is inexperienced with the payload component of the domain expert. This report describes the design and the implementation of an automatic specification-based test-framework for <b>on-board</b> <b>software</b> of satellites to ridge the knowledge and communication gap between the programmer and the domain expert. Model- and test-driven development are in the focus of the testframework. With the help of a domain-specific language, the domain expert is able to model a specification in formal notation, representing potential use-case scenarios of the component. These scenarios are automatically translated to compilable C++ test cases, which help the programmer to verify the functional correctness of the <b>on-board</b> <b>software</b> implementation of the payload component while he or she is programming it...|$|R
40|$|This paper {{describes}} the authors? experience with static analysis of both WCET and stack usage of a satellite <b>on-board</b> <b>software</b> subsystem. The {{work is a}} continuation of a previous case study that used a dynamic WCET analysis tool on an earlier version of the same <b>software</b> <b>system.</b> In particular, the AbsInt aiT tool has been evaluated by analysing both C and Ada code generated by Simulink within the UPMSat- 2 project. Some aspects of the aiT tool, specifically those dealing with SPARC register windows, are compared to another static analysis tool, Bound-T. The results of the analysis are discussed, and some conclusions on the use of static WCET analysis tools on the SPARC architecture are commented in the paper...|$|R
40|$|This paper {{describes}} {{recent developments}} in the ROAMS physics-based simulator for planetary surface exploration rover vehicles. ROAMS includes models for various sub-systems and components of the robotic vehicle including its mechanical subsystem, sensors, on-board resources, <b>on-board</b> control <b>software,</b> the terrain environment and ter-raidvehicle interactions. The ROAMS simulator {{can be used for}} stand-alone simulation, closed-loop simulations with <b>on-board</b> <b>software</b> or for operator-in-the-loop simulations. ...|$|R
5000|$|Software {{engineering}} for the <b>on-board</b> <b>software</b> {{which runs}} all the on-board applications, {{as well as}} low-level control software. This subsystem {{is very similar to}} terrestrial real-time and embedded software designs, ...|$|R
5000|$|The NanoSat MO Framework is an <b>on-board</b> <b>software</b> {{framework}} for nanosatellites based on CCSDS Mission Operation services.The NanoSat MO Framework introduces the well-known concept of [...] "apps" [...] existing in smartphones and tablets to <b>on-board</b> <b>software</b> for spacecraft. This allows an app {{to be easily}} developed, tested, deployed and updated on a spacecraft at any time without causing any major problem. Additionally the same “app” {{can be used on}} different spacecraft platforms.The NanoSat MO Framework apps are able to publish telemetry, receive telecommands or access the GPS device on OPS-SAT and on other nanosatellites without any change in the code.|$|R
40|$|Modern {{aircraft}} {{rely heavily}} on dependable operation of many safety-critical software components. Despite careful design, verification and validation (V&V), <b>on-board</b> <b>software</b> can fail with disastrous consequences if it encounters problematic software/hardware interaction or must operate in an unexpected environment. We are using a Bayesian approach to monitor the software and its behavior during operation and provide up-to-date information {{about the health of}} the software and its components. The powerful reasoning mechanism provided by our model-based Bayesian approach makes reliable diagnosis of the root causes possible and minimizes the number of false alarms. Compilation of the Bayesian model into compact arithmetic circuits makes SWHM feasible even on platforms with limited CPU power. We show initial results of SWHM on a small simulator of an embedded aircraft <b>software</b> <b>system,</b> where <b>software</b> and sensor faults can be injected...|$|R
40|$|This paper {{describes}} the ongoing {{development of the}} ROAMS physics-based simulator for planetary surface explo-ration rover vehicles. ROAMS includes models for various subsystems and components of the robotic vehicle includ-ing its mechanical subsystem, an electrical subsystem, inter-nal and extemal sensors, on-board resources, <b>on-board</b> con-trol <b>software,</b> the terrain environment and the terraidvehicle interactions. The ROAMS simulator {{can be used for}} stand-alone simulation, closed-loop simulations with <b>on-board</b> <b>software</b> or for operator-in-the-loop simulations. ...|$|R
40|$|This {{document}} {{summarizes the}} main results of AIR, an innovation initiative sponsored by ESA, the European Space Agency. The acronym AIR stands for ARINC 653 Interface in RTEMS. The ARINC 653 {{is a civil}} aviation world specification addressing safety critical and certification issues in embedded <b>systems</b> <b>software.</b> The AIR Project studied the adoption of ARINC 653 in space <b>on-board</b> <b>software</b> together with the utilization of RTEMS, the Real-Time Executive for Multiprocessor Systems. This document addresses: (i) the AIR architecture specification; (ii) the AIR support to partitioning mechanisms; (iii) the mapping of ARINC 653 services into RTEMS; (iv) the proof of concept prototype...|$|R
50|$|Argotec {{engineers}} {{worked in}} the definition of the mission objectives and phases, the mission analysis, and the configuration of the satellite. The electrical power subsystem, the on-board computer, and the <b>on-board</b> <b>software</b> are designed and developed by Argotec as well, including the imaging software for target recognition and pointing.|$|R
5000|$|Margaret Hamilton, {{developed}} <b>on-board</b> flight <b>software</b> for the Apollo program ...|$|R
40|$|Real project {{experience}} {{shows that}} reliability models can predict reliability and help develop test strategies. This case study reports on IBM's {{approach to the}} space shuttle's <b>on-board</b> <b>software.</b> This {{research was supported by}} Wliliam Farr of the Naval Surface Warfare Center and Raymond Paul of the Army Operational Test and Evaluation Command...|$|R
50|$|When <b>on-board</b> <b>software</b> {{identifies}} {{a possible}} tsunami, the station leaves standard mode and begins transmitting in event mode. In standard mode, the station reports water temperature and pressure (which are converted to sea-surface height) every 15 minutes. At {{the start of}} event mode, the buoy reports measurements every 15 seconds for several minutes, followed by 1-minute averages for 4 hours.|$|R
40|$|OPS-SAT is an {{in-orbit}} laboratory mission {{designed to}} allow experimenters todeploy new <b>on-board</b> <b>software</b> and perform in-orbit demonstrations of new tech-nology and concepts related to mission operations. The NanoSat MO Frame-work facilitates {{the process of developing}} experimental <b>on-board</b> <b>software</b> for OPS-SAT by abstracting the complexities related to communication across the space toground link as well as the details of low-level device access. The objective of thisproject is to implement functional simulation models of OPS-SAT peripherals andorbit/attitude behavior, which integrated together with the NanoSat MO Frame-work provide a sufficiently realistic runtime environment for OPS-SAT on-boardsoftware experiment development. Essentially, the simulator exposes communi-cation interfaces for executing commands which affect the payload instrumentsand/or retrieve science data and telemetry. The commands can be run either fromthe MO Framework or manually, from an intuitive GUI which performs syntaxcheck. In this case, the output will be displayed for advanced debugging. The endresult of the thesis work is a virtual machine which has all the tools installed todevelop cutting edge technology space applications...|$|R
5000|$|Anti-spam {{appliances}} are software or hardware devices {{integrated with}} <b>on-board</b> <b>software</b> that implement spam filtering and/or anti-spam for instant messaging (also called [...] "spim") and are deployed at the gateway or {{in front of}} the mail server. They are normally driven by an operating system optimized for spam filtering. They are generally used in larger networks such as companies and corporations, ISPs, universities, etc.|$|R
500|$|On June 24, WMATA {{issued a}} press release stating that the agency is [...] "not likely to know the cause for several weeks or months as the {{investigation}} unfolds." [...] Twenty-four hours after the incident, the NTSB confirmed that evidence indicated that the emergency brake had been engaged by the operator. Additionally, the striking train was in automatic mode and so the <b>on-board</b> <b>software</b> should have stopped the train.|$|R
