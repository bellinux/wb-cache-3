6|1|Public
50|$|<b>Offloader</b> - Players {{take turns}} {{to listen to}} a clip and choose which of the other players will answer the question.|$|E
5000|$|Leone Nakarawa â€“ Part of First ever Gold Medal Olympic team â€“ rugby sevens at Rio 2016, Europe's <b>offloader</b> King in 15's rugby.|$|E
50|$|Mieres ranked {{third in}} the Most Offloads Made ranking of the 2015 Rugby World Cup during the group stage for having made seven offloads, the same as world renowned <b>offloader</b> Sonny Bill Williams of the New Zealand All Blacks.|$|E
40|$|Data centers deploy {{a variety}} of middleboxes (e. g., firewalls, load balancers and SSL <b>offloaders)</b> to protect, manage and improve the {{performance}} of applications and services they run. Since existing networks provide limited support for middleboxes, administrators typically overload path selection mechanisms to coerce traffic through the desired sequences of middleboxes placed on the network path. These ad-hoc practices result in a data center network {{that is hard to}} configure and maintain, wastes middlebox resources, and cannot guarantee middlebox traversal under network churn. To address these issues, we propose the policy-aware switching layer or PLayer, a new layer- 2 for data centers consisting of inter-connected policy-aware switches or pswitches. Unmodified middleboxes are placed off the network path by plugging them into pswitches. Based on policies specified by administrators, pswitches explicitly forward different types of traffic through different sequences of middleboxes. Experiments using our prototype software pswitches suggest that the PLayer is flexible, uses middleboxes efficiently, and guarantees correct middlebox traversal under churn...|$|R
50|$|In August 2016, Hyperloop One {{announced}} {{a deal with}} the world's third largest ports operator, DP World, to develop a cargo <b>offloader</b> system at DP World's flagship port of Jebel Ali in Dubai. Hyperloop One also broke ground on DevLoop, its full-scale Hyperloop test track.|$|E
40|$|With {{the advent}} of {{wearable}} computing and the resulting growth in mobile application market, we investigate mobile opportunistic cloud computing where mobile devices leverage nearby computational resources {{in order to save}} execution time and consumed energy. Our goal is to enable generic computation offloading to heterogeneous devices forming a mobile-to-mobile opportunistic computing platform. In this paper, we adopt (1) an analytical approach and (2) an experimental approach to highlight the gain given by mobile-to-mobile opportunistic offloading compared to local execution. We also investigate multiple offloading strategies with regards to both computation time and energy consumption. We propose an auto-splitting and offloading algorithms that computes the optimal chunks sizes that could be offloaded remotely to neighboring mobile device. We show that our splitting and offloading algorithm succeeds in picking the optimal chunk sizes and distribution with up to 99. 7 % efficiency. In addition, the <b>offloader</b> device saves up to 80 % energy while offloading the task remotely. For instance if the <b>offloader</b> device is running out of battery, offloading is the ultimate solution to increase its lifetime...|$|E

