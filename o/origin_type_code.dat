0|3107|Public
40|$|This memo {{provides}} {{information for the}} Internet community. This memo does not specify an Internet standard of any kind. Distribution of this memo is unlimited. Process: This document describes the process for creating new BGP attribute <b>type</b> <b>codes.</b> Basic attribute <b>type</b> <b>codes</b> are described in RFC 1771, pages 12 through 15. These, and new attribute <b>type</b> <b>codes</b> {{that are used in}} the Internet are registered with the IANA. The actual process will involve the documentation of such attribute <b>type</b> <b>codes</b> in an RFC. There is no intention of segmenting the code space into public/private or IP/OSI or any other sectioning. As each attribute <b>type</b> <b>code</b> {{is in the process of}} being developed, it will use an octet value of 255, which will be reserved for this use. At the time an attribute <b>type</b> <b>code</b> is assigned a number by the IANA, the documetnation and code base will be updated to reflect the authorized attribute <b>type</b> <b>code</b> value. IANA maintained values will be published in the periodically updated Assigned Numbers RFC [6]. Requests for assignment of a new attribute <b>type</b> <b>code</b> should be sent to the IANA (IANA@IANA. ORG) with a subject that includes the phrase "BGP Attribute Type". Manning Informational [Page 1] RFC 2042 BGP Atrribute Types January 1997 Currently in use attribute <b>type</b> <b>codes</b> are listed below...|$|R
50|$|A <b>type</b> <b>code</b> is {{the only}} {{mechanism}} used in the classic Mac OS to denote a file's format, {{in a manner similar}} to file extensions in other operating systems. Codes are four-byte OSTypes. For example, the <b>type</b> <b>code</b> for a HyperCard stack is STAK; the <b>type</b> <b>code</b> of any application program is APPL.|$|R
40|$|This study {{examined}} the attitudes toward divorce of Black graduate students from intact and nonintact families of origin. The study hypotheses predicted that Black adults from nonintact families of origin would hold {{more positive attitudes toward}} divorce than Black adults from intact families of origin and that gender would significantly mediate the relationship between attitude toward divorce and family of <b>origin</b> <b>type.</b> A nonprobability convenience sampling procedure was used and questionnaires were administered to 50 Black graduate students to assess attitude toward divorce, family of <b>origin</b> <b>type</b> and other descriptive information. The researcher found that Black adults from nonintact households did not hold significantly more positive attitudes toward divorce than Black adults from intact families of origin, but gender did significantly mediate the relationship between family of <b>origin</b> <b>type</b> and attitude toward divorce. The conclusions drawn from this study suggest that investigations using independent variables other than family of <b>origin</b> <b>type</b> and those that investigate the relationship between attitude toward divorce and family of <b>origin</b> <b>type,</b> solely for Black men would be the most helpful in providing new information to help explain the prevalence of divorce in the African American community...|$|R
5000|$|The Jan Tschichold Justification at <b>Type</b> <b>Code</b> http://blog.typeslashcode.com/2010/05/12/the-jan-tschichold-justification/ ...|$|R
50|$|Beginning with System 1, Macintosh {{operating}} systems have attached <b>type</b> <b>codes</b> and creator codes {{as part of}} the file metadata. These four-character codes were designed to specify both the application that created the file (the creator code) and the specific type of the file (the <b>type</b> <b>code)</b> so that other applications could easily open and process the file data. However, while <b>type</b> and creator <b>codes</b> extended the flexibility of the system — a particular type of file was not restricted to opening in a particular application — they suffered many of the same problems as file extensions. <b>Type</b> and creator <b>codes</b> could be lost when files were transferred across non-Macintosh systems (such as Unix-based servers), and the plethora of <b>type</b> <b>codes</b> made identification problematic.|$|R
50|$|The DNS <b>type</b> <b>code</b> for the NAPTR {{record is}} 35.|$|R
5000|$|Has clear {{enumerated}} value definitions {{if it is}} of <b>type</b> <b>Code.</b>|$|R
5000|$|... #Subtitle level 2: Examples of Model <b>Type</b> <b>codes</b> (positions 7,8 and 12) ...|$|R
50|$|There {{are other}} codes; the <b>type</b> <b>codes</b> {{can be thought}} of like {{registers}} in a computer.|$|R
5000|$|It avoids <b>typing</b> <b>code</b> {{by having}} users {{construct}} programs using visual elements via a game controller ...|$|R
5000|$|Apart {{from the}} <b>type</b> <b>code</b> {{described}} in the preceding section, watch batteries should also be marked with ...|$|R
5000|$|It is {{reported}} that some Oxfords {{were given the}} <b>type</b> <b>code</b> D42 and were used for bombing training.|$|R
5000|$|Another {{widespread}} problem reported after SP1 is that Office files will {{no longer}} open in Office applications when opened (double-clicked) from the Mac OS X Finder or launched from other applications such as an email attachment. The trigger for this problem is that Microsoft in SP1 unilaterally and without warning deprecated certain older Mac OS 'Type' codes such as [...] "WDBN" [...] that some files may have, either because they are simply very old, or because some applications assign the older <b>Type</b> <b>code</b> when saving them to the disk. Users have seen the problem affect even relatively new <b>Type</b> <b>codes,</b> however, such as 'W6BN'. Microsoft is apparently looking into the problem, but it is unclear if they will reinstate the older <b>Type</b> <b>codes,</b> citing security concerns.|$|R
5000|$|Type (one {{of several}} two-letter <b>type</b> <b>codes</b> {{beginning}} with [...] "P", e.g. [...] "PV" [...] for an ordinary passport) ...|$|R
50|$|<b>Type</b> III <b>codes</b> are ternary self-dual codes. Every {{codeword}} in a <b>Type</b> III <b>code</b> has Hamming weight divisible by 3.|$|R
50|$|A {{package unit}} {{is a type}} of {{financial}} instrument that is traded on the London Stock Exchange under security <b>type</b> <b>code</b> 'PU'.|$|R
5000|$|Italicized letters {{indicate}} a departmental code; bold letters {{indicate a}} fixed <b>type</b> <b>code</b> that appears on all plates {{of a particular}} type: ...|$|R
50|$|Water runways do {{not have}} a <b>type</b> <b>code</b> as they {{do not have}} {{physical}} markings, and are thus not registered as specific runways.|$|R
50|$|<b>Type</b> I <b>codes</b> are binary self-dual codes {{which are}} not doubly even. <b>Type</b> I <b>codes</b> are always even (every {{codeword}} has even Hamming weight).|$|R
40|$|<b>Type</b> <b>codes</b> {{arise from}} institutions’ {{authority}} {{to develop their}} own internal rules of organization and operation, with the aim of adapting to the needs and peculiarities of their services. As a policy instrument, <b>type</b> <b>codes</b> provide with special precautions in handling the protection of personal data. This paper seeks to inform all professionals, whether working in the body producing the documentation or in the archival destination, {{of the value of the}} measures taken in this regard within the private sector...|$|R
40|$|We {{describe}} {{a number of}} experiences we have made designing and implementing JacORB, an Object Request Broker (ORB), in Java. These are mainly consequences of choosing Java both as the implementation language for an ORB and as the target language for which this platform is designed. We focus {{on the degree of}} transparency possible in a Java language mapping for IDL, on multithreading in the ORB core and generating CORBA <b>type</b> <b>code</b> information. Keywords: Java, CORBA, transparency, multithreading, <b>type</b> <b>codes.</b> ...|$|R
25|$|Under the ISO code, then, only U, J, and Z are in use. The reefer {{container}} is identified {{by means of}} the size <b>type</b> <b>code.</b>|$|R
40|$|Hadamard {{matrices}} {{and weighing}} matrices {{have been used}} widely {{in the construction of}} binary and ternary self-dual codes. Recently orthogonal designs have been used to construct some new extremal self-dual codes over larger fields such as GF(5) and GF(7) as well as <b>Type</b> II self-dual <b>codes</b> over Z(2 k), k = 2, 3, [...] ., 11. In this paper we use orthogonal designs of order 12, to construct self-dual (Type II and <b>Type</b> I) <b>codes</b> over Z(4) of length 24 and then even unimodular lattices. AMS Subject Classification: Primary 941305, 941325, Secondary 051320 Key words and phrases: Self-dual <b>codes,</b> <b>Type</b> II <b>Codes,</b> <b>Type</b> I <b>Codes,</b> Unimodular Lattices, Even Unimodular Lattices, Odd Unimodular Lattices, Orthogonal Designs...|$|R
5000|$|Vessel <b>type</b> <b>codes</b> are: Prop = propeller-driven; stern = sternwheel-driven; side = side-wheel driven; pddl = paddle-driven, sternwheel or sidewheel.Disposition codes used in {{this list}} are: ...|$|R
40|$|Contracts, gradual typing, and hybrid typing all permit less-precisely typed and more-precisely <b>typed</b> <b>code</b> to interact. Blame {{calculus}} encompasses these, and guarantees blame safety: {{blame for}} type errors always lays with less-precisely <b>typed</b> <b>code.</b> This paper {{serves as a}} complement to the literature on blame calculus: it elaborates on motivation, comments on the reception of the work, critiques some work for not properly attending to blame, and looks forward to applications. No knowledge of contracts, gradual typing, hybrid typing, or blame calculus is assumed...|$|R
50|$|PAgP {{messages}} are always {{sent to the}} well known Cisco multicast address 01-00-0C-CC-CC-CC with protocol <b>type</b> <b>code</b> 0X0104. PAgP uses the same multicast group MAC address of CDP.|$|R
5000|$|The file {{extension}} for MXF files is [...] ".mxf". The Macintosh File <b>Type</b> <b>Code</b> registered with Apple for MXF files is [...] "mxf [...] ", including a trailing space.|$|R
40|$|Dynamic {{languages}} {{are becoming increasingly}} popular for different software development scenarios such as rapid prototyping because of the flexibility and agile interactive development they offer. The benefits of dynamic {{languages are}}, however, counteracted by many limitations produced {{by the lack of}} static typing. In order to obtain the benefits of both approaches, some programming languages offer a hybrid dynamic and static type system. The existing IDEs for these hybrid typing languages do not provide any type-based feature when dynamic typing is used, lacking important IDE facilities offered for statically <b>typed</b> <b>code.</b> We have implemented a constraint-based type inference system that gathers type information of dynamic references at compile time. Using this type information, we have extended a professional IDE to offer those type-based features missed for dynamically <b>typed</b> <b>code.</b> Following the Separation of Concerns principle, the IDE has also been customized to facilitate the conversion of dynamically <b>typed</b> <b>code</b> into statically <b>typed</b> one, and vice versa...|$|R
50|$|The Classic Mac OS used <b>type</b> <b>codes</b> and creator {{codes to}} {{associate}} each file with its corresponding application, regardless of file extension. The more recent macOS also supports file extension-based associations.|$|R
50|$|Filenames can {{be up to}} 255 characters. HFS Plus uses Unicode {{to store}} {{filename}}s. On macOS, the filetype can come from the <b>type</b> <b>code,</b> stored in file's metadata, or the filename extension.|$|R
40|$|AbstractAmong binary {{images of}} a <b>Type</b> II <b>code</b> over F 2 r {{with respect to the}} trace-orthogonal bases, it has been unknown whether the minimum Hamming weights depend on the choice of bases or not; the minimum Hamming weights of the binary images of known <b>Type</b> II <b>codes</b> have been {{independent}} of the choice of bases. In this paper we give a complete list of <b>Type</b> II <b>codes</b> over F 64 of length 8 up to a certain equivalence. This list shows us an example of a <b>Type</b> II <b>code</b> of which minimum Lee weight depends on the choice of a basis...|$|R
40|$|This present {{research}} is conducted {{to find out}} the code switching phenomenon which is produced by a Javanese and a Papuan. This research is aimed to investigate the <b>codes,</b> <b>types</b> of <b>code</b> switching and also the social factors influencing code switching produced by the subjects. The writer mainly based his research on the theories from Holmes (1992) and Wardhaugh (2006). This research used descriptive quantitative approach. The writer got the data from his conversation with the subjects. Both the subjects produced three <b>types</b> of <b>code</b> switching and three factors of <b>code</b> switching. The <b>types</b> of <b>code</b> switching were situational code switching, metaphorical code switching, and conversational code switching. The social factors of code switching were participants, topic, and affective functions. For the Javanese subject, the most frequent <b>type</b> of <b>code</b> switching that occurred is metaphorical, and for the Papuan, the most frequent <b>type</b> of <b>code</b> switching that occurred is conversational. For the social factors, both of the subjects switch their code because of affective function...|$|R
50|$|A QC record {{consists}} of a fixed 23-byte header (containing record <b>type</b> <b>codes,</b> destination account details, and the transaction amount) followed by zero or more optional fields, {{each of which is}} of variable size.|$|R
50|$|The 'B' in the <b>type</b> <b>codes</b> {{refers to}} Beckton DLR depot, {{where they are}} {{primarily}} maintained. They are of a common design and can be operated interchangeably in trains of up to three sets.|$|R
40|$|AbstractRecently, {{there has}} been {{tremendous}} interest in self-dual codes over finite rings, specifically the rings Z 2 k. In this note, the first examples of extremal <b>Type</b> II <b>codes</b> over Z 6 of length 32 are constructed. These give examples of extremal even unimodular lattices in dimension 32 by Construction A. A relationship between extremal <b>Type</b> II <b>codes</b> over Z 6 and binary extremal <b>Type</b> II <b>codes</b> is also investigated...|$|R
40|$|In this paper, {{we study}} self-dual codes over the ring Z 2 k of the {{integers}} modulo 2 k with relationships to even unimodular lattices, modular forms, and invariant rings of This work {{was supported in}} part by a grant from the Japan Society for the Promotion of Science. finite groups. We introduce <b>Type</b> II <b>codes</b> over Z 2 k which are closely related to even unimodular lattices, as a remarkable class of self-dual codes and a generalization of binary <b>Type</b> II <b>codes.</b> A construction of even unimodular lattices is given using <b>Type</b> II <b>codes.</b> Several examples of <b>Type</b> II <b>codes</b> are given, in particular the first extremal <b>Type</b> II <b>code</b> over Z 6 of length 24 is constructed, which gives a new construction of the Leech lattice. The complete and symmetrized weight enumerators in genus g of codes over Z 2 k are introduced, and the MacWilliams identities for these weight enumerators are given. We investigate the groups which fix these weight enumerators of <b>Type</b> II <b>codes</b> over Z 2 k and we give the Molien se [...] ...|$|R
