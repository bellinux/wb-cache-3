7|1324|Public
40|$|The <b>Office</b> <b>Document</b> <b>Architecture</b> (ODA) is an International Standard {{which is}} {{developed}} by TC 97 /sc 18 of the International Organization for Standardization (ISO) in close collaboration with CCITT's Study Group VIII and with ECMA. This paper describes {{the current state}} of a formal specification of the ODA document structures by mathematical means and its use for conformance specification and conformance testing...|$|E
40|$|In this {{document}} we discuss those functions {{performed by a}} notary and the requirements that such a functionary places on its environment, location and communications. The discussion takes place with specific reference to the notary's role in DODA (a Distributed <b>Office</b> <b>Document</b> <b>Architecture),</b> but keeps more general needs in mind. Finally a way of implementing a notary in UNIX using UATP (Unix Access Table Protection) is described...|$|E
40|$|The EXPRES (Experimental Research in Electronic Submission) project {{promotes}} the electronic interchange of multi-media documents among the scientific research community. For this project we {{concentrate on the}} problem of effective interchange of processable multi-media documents. In particular, we are ignoring the transfer method. Instead we concern ourselves with the question of how a multi-media document created on one system can be viewed and edited on another system. The obvious technique of performing translations between each pair of systems is impractical. In order to attack the problems efficiently, we make use of a standard representation. "We have settled on the international standard <b>Office</b> <b>Document</b> <b>Architecture</b> (ODA) [ISO 88 a] as the intermediate format. This paper discusses how we implemented ODA for interchange...|$|E
40|$|This {{report has}} come to being while we were reading the Draft ISO Standard 8613, Parts 1 - 6 : <b>Office</b> <b>Documents</b> <b>Architecture</b> and {{interchange}} format [ODA]. The precise nature of that undertaking may be of no concern for the Reader but {{we think it is}} typical of many projects arising in an industrial environment, and as such it may serve to illustrate some ways of filling the gap between the VDM theory and the industrial practice. ODA is a large project seeking to fulfill conflicting demands of many partners. We believe many discussions and negotiations must have preceded setting up the final document. Without taking part in these activities [ODA] is rather difficult to understand. The authors of ODA apparently lacked means to communicate ideas: the description suffers from many ambiguities, loopholes, imprecise statements and unstructured presentation...|$|R
5000|$|<b>Office</b> <b>Documents,</b> {{to publish}} <b>Office</b> <b>documents</b> under the {{behavioural}} model control ...|$|R
5000|$|... a <b>document</b> <b>architecture</b> {{where each}} <b>document</b> was a {{directory}} nested in another document's directory (in some sense, {{this was an}} extension of the <b>document</b> <b>architecture</b> on Multics) ...|$|R
40|$|A thesis {{submitted}} in partial fulfilment of {{the requirements}} of the University of Hertfordshire for the degree of Doctor of PhilosophyThis thesis is about DODA, a Distributed <b>Office</b> <b>Document</b> <b>Architecture,</b> designed to facilitate secure, yet cooperative, document development. It is an object-oriented system, based on the abstraction of document objects and functionaries. A document object is a structured entity composed of sub-components called folios, which may be textual or hold document methods. A document's folios may be processed in parallel, through transactions that may produce document versions. DODA combines, in a novel yet coherent manner, well-known techniques from the fields of data protection, access and concurrency control. DODA offers a unified approach to providing mandatory access control, concurrency control, version control, semantic consistency, protection against tampering and an unforgeable audit trail, in a way which facilitates the replication and local processing of document folios by a number of users in parallel...|$|E
40|$|With {{the growth}} in the spread of {{computer}} networks the demand by users for document interchange features is becoming increasingly apparent. The prerequirement for the realization of document interchange in a heterogenous computer environment are internationally accepted standards for the description of documents. Already in early 1986, the Standard Generalized Markup Language SGML was published as an international standard for the structuring of documents. The publication of the <b>Office</b> <b>Document</b> <b>Architecture</b> ODA is expected in the course of 1988. The final text is already available. ODA was originally developed for the pure office environment, whereas the concept for SGML addressed the author/publisher environment. This fact is mirrored in the current pilot projects testing the standards: the manufacturers of office and word-processing systems mainly work with ODA, whereas in the technical scientific and publishing sectors SGML is often implemented. Users requiring an interface both to the office sector {{as well as to the}} publishing sector will therefore be confronted with the problems related to working with two different, only partially compatible standards...|$|E
40|$|Using ODA for Translating Multimedia Information The {{purpose of}} this RFC is to inform implementors of {{multimedia}} systems about our experiences using ISO 8613 : <b>Office</b> <b>Document</b> <b>Architecture</b> (ODA). Because ODA is being proposed as an encoding format for use in multimedia mail and file exchange, implementors wishing to use ODA in an open systems environment may profit from our experiences. This memo provides information for the Internet community. It does not specify any standard. Distribution of this memo is unlimited. 2. Overview ODA is a recently approved ISO (8613) and CCITT (T. 410) standard for representing documents containing multifont text, raster images and geometric graphics. This encoding has been specified {{for use in a}} number of related standards, such as X. 400. However, ODA is a very abstract standard, defining entities such as "composite logical object classes " and not common entities, such as "paragraphs". Therefore, effective use of ODA as an interchange medium requires the definition of a document application profile (dap) that defines some common entities and a map between ODA entities defined in the dap and entities used in the interchanged systems...|$|E
5000|$|... final-form <b>document</b> <b>architecture</b> {{and page}} {{information}} interchange ...|$|R
5000|$|PS3.20: Imaging Reports using HL7 Clinical <b>Document</b> <b>Architecture</b> ...|$|R
5000|$|HL7 {{clinical}} <b>document</b> <b>architecture</b> and HL7 {{clinical context}} management.|$|R
40|$|Significant {{progress}} has been made in the area of final form document description with Postscript emerging as a de facto standard. Some {{progress has}} been made on the translation of page description languages [...] Postscript to Interpress and Interpress to Postscript. However, these developments are of no assistance in the sharing of documents that may need to be revised. The ISO OSI standards for revisable form documents interchange continue to evolve with the Standard Generalized Markup Language, the <b>Office</b> <b>Document</b> <b>Architecture,</b> and the Office document Interchange Format offering great promise for the future. While the ultimate solution to document interchange is universal acceptance of an interchange standard, some intermediate solution is required to meet the needs that exist today. It is in this context that document conversion systems are considered. The approaches to conversion fall in two broad categories. The first category includes systems that hard code each conversion. The second category of system rely on an intermediate metalanguage [...] a standard. This paper describes a hybrid system for converting files created by one text processing system to a format suitable for another. The discussions covers the design principles for an extended machine and table driven approach. Tables allow for user involvement in customizing and developing new conversions while an extended machine allows for logical and arithmetic control of the conversion. The paper describes the kinds of copymarks found in text files, sets out the scope of what a copymark conversion engine must do, describes how various approaches tackle the problem, and describes how the conversion engine produced accomplishes these goals...|$|E
40|$|Office {{applications}} such as OpenOffice and Microsoft Office are widely used to edit the majority of today’s business doc-uments: <b>office</b> <b>documents.</b> Usually, version control systems consider <b>office</b> <b>documents</b> as binary objects, thus severely hindering collaborative work. Since XML has become a de-facto standard for office applications, we focus on ver-sioning <b>office</b> <b>documents</b> by structured XML version control approaches. This enables state-of-the-art version control for <b>office</b> <b>documents.</b> A basic prerequisite to XML version control is a diff algo-rithm, which detects structural changes between XML doc-uments. In this paper, we evaluate state-of-the-art XML diff algorithms w. r. t. their suitability to OpenOffice XML documents and the future OASIS <b>office</b> <b>document</b> standard. It turns out that, due to the specific XML office format, a careful examination of the diff algorithm characteristics is necessary. Therefore, we identify important features for XML diff approaches to handle <b>office</b> <b>documents.</b> We have implemented a first OpenOffice versioning API {{that can be used}} in version control systems as a replacement for line-based or binary diffs, which are currently used...|$|R
50|$|IBM's European Networking Center (ENC) in Heidelberg, Germany, {{developed}} prototype extensions to OfficeVision/VM {{to support}} Open <b>Document</b> <b>Architecture</b> (ODA), in particular a converter between ODA and <b>Document</b> Content <b>Architecture</b> (DCA) <b>document</b> formats.|$|R
5000|$|MS-OFFCRYPTO: <b>Office</b> <b>Document</b> Cryptography Structure Specification ...|$|R
40|$|Fluid <b>office</b> <b>documents,</b> as semi-structured data often {{represented}} by Extensible Markup Language (XML) are {{important parts of}} Big Data. These <b>office</b> <b>documents</b> have different formats, and their matching Application Programming Interfaces (APIs) depend on developing platform and versions, which causes difficulty in custom development and information retrieval from them. To solve this problem, we have been developing an <b>office</b> <b>document</b> query (ODQ) language which provides a uniform method to retrieve content from documents with different formats and versions. ODQ builds common document model ontology to conceal the format details of documents and provides a uniform operation interface to handle <b>office</b> <b>documents</b> with different formats. The results show that ODQ has advantages in format independence, and can facilitate users in developing documents processing systems with good interoperability...|$|R
25|$|A {{memorandum}} {{on the use}} of open {{standards for}} creating and exchanging <b>office</b> <b>documents</b> was approved by Belgium's federal Council of Ministers on June 23, 2006. OpenDocument was proposed as the standard for exchanging <b>office</b> <b>documents</b> such as texts, spreadsheets, presentations within the federal civil service.|$|R
5000|$|Clinical <b>Document</b> <b>Architecture</b> (CDA) - an {{exchange}} model for clinical documents, based on HL7 Version 3 ...|$|R
5000|$|OpenDocument — [...]odt (XML-based {{standard}} for <b>office</b> <b>documents)</b> ...|$|R
25|$|Google Cloud Connect was a plug-in for Microsoft Office 2003, 2007 and 2010 {{that could}} {{automatically}} store and synchronize any Word document, PowerPoint presentation, or Excel spreadsheet to Google Docs (before {{the introduction of}} Drive) in Google Docs or Microsoft Office formats. The online copy was automatically updated each time the Microsoft <b>Office</b> <b>document</b> was saved. Microsoft <b>Office</b> <b>documents</b> could be edited offline and synchronized later when online. Google Cloud Connect maintained previous Microsoft <b>Office</b> <b>document</b> versions and allowed multiple users to collaborate by working on the same document at the same time.|$|R
5000|$|Accounting {{software}} (HomeBank), Clipart, CAD and <b>office</b> <b>documents</b> templates ...|$|R
50|$|The Korean Corby {{does not}} have an <b>office</b> <b>document</b> viewer.|$|R
5000|$|... “Specification for <b>Office</b> <b>document</b> format (Uniform <b>Office</b> Format (UOF))” issued.|$|R
5000|$|LibreOffice suite - {{to convert}} <b>office</b> <b>documents</b> to OpenDocument format ...|$|R
5000|$|Office Open XML — [...]docx (XML-based {{standard}} for <b>office</b> <b>documents)</b> ...|$|R
5000|$|OpenOffice.org XML — [...]sxw (open, XML-based {{format for}} <b>office</b> <b>documents)</b> ...|$|R
5000|$|The program {{supports}} editing {{of local}} Microsoft <b>Office</b> <b>documents</b> online using Google Docs.|$|R
5000|$|Microsoft <b>Office</b> <b>Document</b> Scanning: a {{scanning}} and OCR application. Discontinued with Office 2010.|$|R
50|$|Outlook.com {{integrates}} with Office Online {{to allow}} viewing and editing of Microsoft Word, Excel and PowerPoint documents that {{are attached to}} the email messages. Users can directly open attached <b>Office</b> <b>documents</b> within the web browser, and save them into their OneDrive. Users can also perform edits to any received <b>Office</b> <b>documents,</b> and directly reply to the sender with the edited version of the document. In addition, users may also send up to 25 GB of <b>Office</b> <b>documents</b> (up to 50 MB each) using Outlook.com by uploading these documents onto OneDrive, and share these documents with other users for viewing or collaboration. Users can also save emails to OneNote.|$|R
5000|$|Microsoft <b>Office</b> <b>Document</b> Imaging: an {{application}} that supports editing scanned <b>documents.</b> Discontinued with <b>Office</b> 2010.|$|R
5000|$|Protect: Microsoft <b>Office</b> <b>documents</b> synced to Google Docs {{can be made}} {{accessible}} to one person.|$|R
5000|$|Calendar, Contacts, Music player, Internet, Messaging, Photos, Videos, Web TV, <b>Office</b> <b>documents</b> viewers, Mail and Radio ...|$|R
5000|$|... {{implementation}} {{and management of}} learning material such as images, PDF, <b>Office</b> <b>documents,</b> videos, audio, HTML courses ...|$|R
50|$|The {{recommended}} filename extensions and MIME {{types are}} included in the official standard (OASIS, May 1, 2005 and its later revisions or versions). The MIME types and extensions contained in the ODF specification are applicable only to <b>office</b> <b>documents</b> that are contained in a package. <b>Office</b> <b>documents</b> that conform to the OpenDocument specification but are not contained in a package should use the MIME type text/xml.|$|R
5000|$|The MODI {{object model}} is {{accessible}} from development tools {{that support the}} Component Object Model (COM) by using {{a reference to the}} Microsoft <b>Office</b> <b>Document</b> Imaging 11.0 Type Library. The MODI Viewer control is accessible from any development tool that supports ActiveX controls by adding Microsoft <b>Office</b> <b>Document</b> Imaging Viewer Control 11.0 or 12.0 (...) to the application project. These folders are usually located in [...]|$|R
