1|9|Public
50|$|The {{processor}} normally manipulates 8-bit data bytes, but {{the mask}} unit {{makes it possible}} to manipulate single or multiple bits, making this a variable data-length processor. Internal data is stored in 8-bit read/write registers—R1 through R6,R9, and an auxiliary register (R0). The auxiliary register holds one of the operands used in two-operand instructions, such as ADD or AND, and a single-bit (read only) <b>overflow</b> <b>register</b> (R8) stores the carry-over bit from add operations. Two virtual write only registers IVL (R7) and IVR (R15) are used to put an address on the IV bus, and two sets of eight virtual registers (R16-R23 and R24-R31) are used to transfer data to or from the IV bus. In the latter case, the upper two bits of the register number select the left or right bank, and the lower three bits define the number of places the data is to be rotated.An 8-bit IV-bus buffer retains a copy of the last data to be transferred to or from the IV-bus. This data is used in Merge operations.|$|E
50|$|Omission of the {{high-order}} {{bit of the}} divisor polynomial: Since the {{high-order bit}} is always 1, and since an n-bit CRC must be defined by an (n + 1)-bit divisor which <b>overflows</b> an n-bit <b>register,</b> some writers assume that it is unnecessary to mention the divisors high-order bit.|$|R
5000|$|Usually, {{comparison}} instructions test equality or signed/unsigned magnitude. To {{test for}} other conditions, a program uses an equivalence formula. For example, MIPS has no [...] "overflow bit" [...] but a program performing multiple-word addition can test whether a single-word addition of <b>registers</b> <b>overflowed</b> by testing whether the sum {{is lower than}} an operand: ...|$|R
50|$|In {{addition}} to the converters, many embedded microprocessors include a variety of timers as well. One {{of the most common}} types of timers is the Programmable Interval Timer (PIT). A PIT may either count down from some value to zero, or up to the capacity of the count <b>register,</b> <b>overflowing</b> to zero. Once it reaches zero, it sends an interrupt to the processor indicating that it has finished counting. This is useful for devices such as thermostats, which periodically test the temperature around them to see if they need to turn the air conditioner on, the heater on, etc.|$|R
40|$|Two {{very fast}} and simple O(lg n) {{algorithms}} for individual Fibonacci numbers are given and compared to competing algorithms. A simple O(lg n) recursion is derived {{that can also}} be applied to Lucas. A formula is given to estimate the largest n, where F_n does not overflow the implementation's data type. The danger of timing runs on input that is too large for the computer representation leads to false research results. Comment: 11 pages, 1 table This paper illustrates the importance of considering storage size when running experiments and {{that the results of}} expermential comparsion of algorithms in a well known paper are at best unreliable because of <b>register</b> <b>overflow.</b> The two presented algorithms are concise but readabl...|$|R
40|$|We have {{considered}} the response of a variable step size delta modulator communication system, to errors caused by a noisy channel. For the particular adaptive delta modulation scheme proposed by Song, Garodnick, and Schilling (1971), we have a simple analytic formulation of the output error propagation due to a single channel error. It is shown that single channel errors cause {{a change in the}} amplitude and dc level of the output, but do not otherwise affect the shape of the output waveform. At low channel error rates, these effects do not cause any degradation in audio transmission. Higher channel error rates cause overflow or saturation of the step size register. We present relationships between channel error rate, register size, and the probability of <b>register</b> <b>overflow...</b>|$|R
5000|$|Among the gang's {{suppliers}} were schooners from Cuba, Jamaica, and the Bahamas. They {{had money}} <b>overflowing</b> the cash <b>registers</b> from speakeasys owned {{up and down}} Downtown Galveston. The gang was making more money than ever, encouraging them to buy fancy clothing, cars, houses, and food. Some of the gang's popular business partners were the Chicago Outfit's Frank Nitti and allegedly New York Jewish mob boss Arnold Rothstein. Therefore, Nitti became a good business partner of Johnny Jack which created a good connection with the Downtown Gang and the Chicago Outfit. Gangland shootouts was something that would come around {{every once in a}} while since the gain of the island led to more business. The Downtown Gang sold bootleg hooch and had connections from New Orleans, Louisiana, all the way up to Montreal, Canada.|$|R
40|$|AbstractÐIn a {{cellular}} phone system, mobility databases called visitor location registers (VLRs) are used to temporarily hold the subscription information of the roaming users who visit the service area of the VLR. When the users leave the VLR area, the corresponding records in the VLR are deleted. Due to user mobility, {{the capacity of the}} VLR may not be large enough to hold information for all visitors in the VLR area at some time periods. This issue is called VLR overflow. This paper describes a record replacement policy to allow mobile users to receive services in the VLR overflow situation. We utilize analytic modeling to investigate the performance of the replacement policy. The study indicates that our approach effectively eliminates the VLR overflow problem with insignificant extra overhead. Index TermsÐCellular telephone network, database <b>overflow,</b> home location <b>register,</b> large-scale database, visitor location register. ...|$|R
40|$|A {{hardware}} managed register stack, Register Stack Engine (RSE), {{is implemented}} in Itanium ® architecture {{to provide a}} unified and flexible register structure to software. The compiler allocates each procedure a register stack frame with its size explicitly specified using an alloc instruction. When {{the total number of}} registers used by the procedures on the call stack exceeds the number of physical registers, RSE performs automatically <b>register</b> <b>overflows</b> and fills to ensure that the current procedure has its requested registers available. The virtual register stack frames and RSE alleviate the need of explicit spills by the compiler, but our experimental results indicate that a trade-off exists between using stacked registers and explicit spills under high register pressure due to the uneven cost between them. In this work, we introduce the stacked register quota assignment problem based on the observation that reducing stacked register usage in some procedures could reduce the total memory access time of spilling registers, which includes the time caused by the loads/stores due to explicit register spills and RSE overflows/fills. We propose a new inter-procedural algorithm to solve the problem by allocating stacked registers across procedures based on a quantitative cost model. The results show that our approach can improve performance significantly for the programs with high RSE overflow cost, e. g. perlbmk and crafty, improved by 14 % and 3. 7 %, respectively...|$|R
40|$|BACKGROUND AND OBJECTIVES Pathogens in source waters {{represent}} a health risk for drinking water consumers {{that may result}} in waterborne diseases, if not sufficiently removed within water treatment plants. According to the water safety plans in the WHO Drinking Water Guidelines (3 rd ed.), identification and comparison of drinking water hazards within the catchment is of significant importance to accomplish effective risk management. In comparison to baseline concentrations significantly higher levels have been documented after heavy rainfalls (Kistemann et al. 2002; Signor et al. 2005) {{and a large number}} of waterborne outbreaks documented have been preceded by periods of heavy rainfalls (Rose et al. 2000; Curriero et al. 2001). Heavy rainfalls with wastewater discharges, in combination with treatment failures, resulted in the largest waterborne outbreak in Sweden in 1988. In this paper we have assessed the spatial and temporal distribution of wastewater discharges from urban areas along the river Göta älv used for drinking water supply to about 700 000 people including the city of Göteborg. The objectives were to assess the pathogen loads and variability by simulations of wastewater discharges from the urban sewage systems. The simulations have been compared with measured concentrations of pathogens and faecal indicator bacteria in the river. METHODS Microbial point sources in municipal sewage systems along the river Göta älv, upstream the raw water intake to the city of Göteborg, were identified and quantified in relation to time and magnitude. Data on discharges of treated wastewater from wastewater treatment plants (WWTPs), as well as untreated wastewater from combined sewer overflows (CSOs) and sanitary sewer overflows (SSOs), were collected, including onsite monitoring and urban wastewater modelling results. Literature data on the concentrations as well as the reduction of indicator bacteria (E. coli and spores of clostridia), Campylobacter, noroviruses, Giardia and Cryptosporidium within sewage systems were used. Through Monte Carlo simulations the daily microbial loads to the river were calculated using pathogen concentrations and discharge information from the wastewater systems for each single discharge point. Microbial loads were calculated for baseline conditions and for rain event conditions, based on a half year data period. Baseline conditions were defined as dry weather periods with discharges predominantly of treated wastewater. Rain event conditions were separately described for two wet weather periods, including discharges from CSOs and SSOs. Assuming a total mixing of wastewater pathogens discharged into the river, the downstream microbial concentration was approximated and compared to sampling data on indicator and pathogens from the river Göta älv for the same data period. RESULTS The discharge volumes of treated wastewater varied highly between WWTPs along the river as a function of persons connected and the portion of stormwater within the system. CSOs as well as SSOs activated during wet weather periods increased the discharge volumes from the urban sewer systems. Daily loads simulated for the indicator bacteria as well as the pathogens were presented in figures, showing the contributions for the separate municipalities along the river. In general, the pathogen loads during baseline conditions were defined by the flow and the number of persons connected to each system, while the pathogen loads during rain conditions were additionally set by the degree of combined and sanitary sewer overflows. Downstream positive detections of norovirus were made during a wet weather period with multiple discharges of combined and sanitary sewer <b>overflows</b> <b>registered</b> along the river, confirming the simulated results. Overall, the river concentrations approximated by these simulations, were in the same range for the faecal indicator bacteria as compared to sampling data for the same period, but higher for the Campylobacter and slightly lower for norovirus, Giardia and Cryptosporidium. CONCLUSIONS AND SIGNIFICANCE OF THE WORK In this study, local flow and volume registrations were used to theoretically assess the pathogen load along a river used as a source for drinking water production. The range of pathogen loads from the urban areas, as well as the differences between dry and wet weather conditions, illustrates the potential variability of source water pathogen concentrations. This information may be used for assumptions on pathogen concentration, such as within quantitative microbial risk assessments. Present simulation results also suggest a first prioritization for reduction of microbial loads within urban wastewater systems along this river, such as the need for local additional wastewater treatment steps in order to bring down the spread of pathogens. This investigation is also a starting point to further investigate presently unquantified microbial sources, such as unregistered CSOs, SSOs and animal contaminations, as well as the microbial effects from sedimentation, die-off and the downstream microbial transport mechanisms in the river...|$|R

