0|10000|Public
40|$|In this paper, we {{introduce}} a general framework of language embedding in OO host languages. Unlike other approaches, which embed <b>object</b> <b>language</b> <b>programs</b> as nested calls to functions or data constructors, our framework embeds <b>object</b> <b>language</b> <b>programs</b> as {{a chain of}} method invocations. Our framework allows embedding {{a wider range of}} <b>object</b> <b>language</b> grammars into an OO host language, while still allowing <b>object</b> <b>language</b> <b>programs</b> to be type checked by the host language compiler and to run efficiently at run time. We demonstrate our framework using ELIA, our extension to Java with automatically constructed parameters (ACPs), and show how we can encode the parser, AST builder, type checker, and interpreter for the simply typed lambda calculus (STLC) in a concrete syntax without redundant brackets or commas. Our framework is only based on the basic OO features, generics, and ACPs, and do not require higher-order functions or generalized abstract data types (GADTS) in the host language. It is a generalization of our previous framework [34], which can be fully implemented in Java without ACPs. ...|$|R
40|$|Recently, several {{descriptions}} of <b>object</b> oriented <b>programming</b> <b>languages</b> with denotational semantics have been given. Cook presented a denotational semantics of class inheritance. This semantics abstracts from the internal state of objects, {{which is one}} of their salient characteristics. In this paper we show that Cooks denotational semantics of class inheritance is applicable to <b>object</b> oriented <b>programming</b> <b>languages,</b> where <b>objects</b> have a state. For this purpose we define a direct denotational semantics of a small <b>object</b> oriented <b>programming</b> <b>language.</b> We claim that the resulting denotational semantics is clear and can serve the derivation of efficient implementations of <b>object</b> oriented <b>programming</b> <b>languages...</b>|$|R
40|$|Almost no <b>object</b> {{oriented}} <b>programming</b> <b>languages</b> offer distinct language constructs for {{the definition}} of types and their implementations; instead these are united into a single class concept. Similarly <b>object</b> oriented <b>programming</b> <b>languages</b> do not normally distinguish between object types, which may be independently instantiated, and attribute types, which may not. The pape...|$|R
50|$|Combined together, {{these two}} parts form a {{complete}} prototype-based <b>Object</b> Oriented <b>programming</b> <b>language</b> which is entirely self-hosting.|$|R
40|$|In {{this paper}} we are {{interested}} in algebraically specifying Application Program Interfaces (APIs) in <b>object</b> oriented <b>programming</b> <b>languages,</b> and embedding such algebraic specifications within program source code such that (a) the documentation of API semantics is formalized algebraically; and (b) executable algebraic specifications can be extracted from source code. We are using Maude [3] to build executable specifications, though other languages could be chosen instead. Currently, we are specifically interested in modeling [subsets of] Java[1] and C#[5], though the work could be extended and adapted to other <b>object</b> oriented <b>programming</b> <b>languages.</b> This paper is founded on the work on <b>object</b> oriented <b>programming</b> <b>language</b> interfaces introduced in [6] and expanded on in [7]. This work is a detailed exploration of the concept of, and issues arising from interfaces (essentially the signatures of classes) commonly found in <b>object</b> oriented <b>programming</b> <b>languages.</b> In particular, it explores in detail the issue of inheritance and how it can be managed. We extend the interfaces of [6, 7] to enable us to represent methods an...|$|R
50|$|ZZT-oop was {{an early}} in-game {{scripting}} <b>programming</b> <b>language,</b> designed by Tim Sweeney, for his computer game ZZT. The name stands for ZZT <b>Object</b> Oriented <b>Programming</b> <b>language.</b>|$|R
5000|$|LotusScript is an <b>object</b> {{oriented}} <b>programming</b> <b>language</b> used by Lotus Notes (since version 4.0) {{and other}} IBM Lotus Software products.|$|R
50|$|The term is also {{sometimes}} {{used to describe}} object-relational mapping systems, which bridge the divide between the SQL database world and modern <b>object</b> <b>programming</b> <b>languages.</b>|$|R
50|$|AppleScript {{has some}} {{elements}} of procedural programming, object-oriented programming (particularly {{in the construction of}} script <b>objects),</b> and natural <b>language</b> <b>programming</b> tendencies in its syntax, but does not strictly conform to any of these programming paradigms.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis addresses {{object oriented programming}} languages; and a restrictive definition of <b>object</b> oriented <b>programming</b> <b>languages</b> is presented and defended. Differences between <b>programming</b> <b>languages</b> are discussed and related to interactive integrated programming environments. Topics related to user friendly interface to the computer system and modem programming practice are discussed. The thesis especially addresses features in <b>object</b> oriented <b>programming</b> <b>languages</b> that are important when a user friendly interactive integrated programming environment is designed. Some future research areas are suggested. [URL] Commander, Norwegian Nav...|$|R
40|$|Abstract: In {{teaching}} a <b>programming</b> <b>language,</b> one frequently uses some machine model illustrating {{the execution of}} a program. In case of a usual <b>object</b> oriented <b>programming</b> <b>language</b> this machine model might consist of objects stored in a heap, a procedure call stack, local variables, a program counter, etc. Due to our opinion, this level of abstraction is too low to really leverage the learning of an <b>object</b> oriented <b>programming</b> <b>language.</b> On the other hand, the usual object oriented modelling metaphor of objects that exchange messages is not detailed enough for learning programming. In the Fujaba project, we use story diagrams, a new graphical <b>programming</b> <b>language</b> that combines UML activity diagrams and UML object diagrams with the semantics of graph transformations. To facilitate the teaching of this new language we developed a new execution model on an appropriate level of abstraction. This execution might also be helpful for learning usual <b>object</b> oriented <b>programming</b> <b>languages.</b> ...|$|R
50|$|Programmers {{often use}} assertions in their code to make invariants explicit. Some <b>object</b> {{oriented}} <b>programming</b> <b>languages</b> {{have a special}} syntax for specifying class invariants.|$|R
50|$|In {{computer}} science, the funarg problem {{refers to}} the difficulty in implementing first-class functions (functions as first-class <b>objects)</b> in <b>programming</b> <b>language</b> implementations so as to use stack-based memory allocation of the functions.|$|R
40|$|In fact Java is {{standard}} <b>object</b> orieneted <b>programming</b> <b>language.</b> Unified Modelling Language (UML) {{is in fact}} visual model standard in designing software object oriented. Java as <b>object</b> oriented <b>programming</b> <b>language</b> used applied model result using UML. Both have elements interpretation, so that can be gotten syncronisesion between some diagram in UML and java language fiture. This paper flatten map scheme like class diagram, sequential, component, and starchart to resource code srtucture in java. Map scheme evaluation test used simple model part, than made UML diagram required. This paper discuss strudtured approach in arousing java code from UML elements...|$|R
40|$|The IK {{programming}} environment was designedtoease {{the development of}} distributed applications which use object-orientedconcepts. The IK Run Time Support solves {{most of the problems}} introduced by distribution, such as locating and accessing objects, translating between different data representations or even between different <b>object</b> <b>programming</b> <b>languages...</b>|$|R
40|$|Object Orientation (OO) {{was the big}} hype of {{the late}} 1980. Everyone and {{everything}} should be <b>object</b> oriented. Databases, <b>programming</b> <b>languages</b> and software development projects {{were some of the}} most visible examples. Today OO has joined the more established paradigms in computer science. <b>Object</b> Oriented <b>programming</b> <b>languages</b> ar...|$|R
40|$|The OFL Model is a meta-model for <b>object</b> {{oriented}} <b>programming</b> <b>languages.</b> It provides customization of main {{aspects of}} the semantics of a language through actions and parameters. The provided customization can deal only with features than are general enough for being applicable to most existing object-oriented <b>programming</b> <b>languages...</b>|$|R
40|$|This is {{the second}} report on TyCO, a (still) {{experimental}} strongly and implicitly typed concurrent <b>object</b> oriented <b>programming</b> <b>language</b> based on a predicative polymorphic calculus of objects, featuring asynchronous messages, objects, and process declarations, together with a predicative polymorphic type syste...|$|R
50|$|Object Model. This {{was based}} on the Object Management Group's Object Model. The OMG core model was {{designed}} to be a common denominator for object request brokers, object database systems, <b>object</b> <b>programming</b> <b>languages,</b> etc. The ODMG designed a profile by adding components to the OMG core object model.|$|R
40|$|Nowadays, {{different}} kinds of processors are appearing in the computer market, therefore {{it is necessary to}} observe the performance of these processors at the early stage of computation of object oriented programs. In this context, the present paper deals with the evaluation of the performance of Dual Core and Core 2 Dual processors architecture for the <b>Object</b> Oriented <b>Programming</b> <b>languages.</b> The main objective of this work is to propose the best <b>object</b> oriented <b>programming</b> <b>language</b> for the software development on these said processors architecture. A well known modeling language i. e. Unified Modeling Language (UML) is used to design a performance oriented model, consisting of UML class, UML sequence and UML activity diagrams. Experimental study is performed by taking the two most popular <b>object</b> oriented <b>languages</b> namely C++ and JAVA. Comparative study is depicted with the help of tables and graphs...|$|R
40|$|We {{specify the}} dynamic {{semantics}} of an <b>object</b> oriented <b>programming</b> <b>language</b> in an incremental way. We {{begin with a}} simple language of arithmetic and boolean expressions. Then, we add functional abstractions, local declarations, references and assignments obtaining a functional language with imperative features. We finally add objects, classes and subclasses to obtain a prototypical <b>object</b> oriented <b>language</b> with dynamic binding...|$|R
50|$|Program transformations often operate by {{modifying the}} {{abstract}} syntax tree (AST). In Stratego {{it is also}} possible to specify transformations using concrete syntax. This allows programmers to express a transformation using the familiar (and often more concise) syntax of the <b>object</b> <b>programming</b> <b>language,</b> while it internally still operates on the AST.|$|R
40|$|We {{observe that}} {{compared}} to natural and modelling languages, {{the differences in}} expression required to deal with no, one, or many <b>objects</b> in <b>programming</b> <b>languages</b> are particularly pronounced. We identify some problems inherent in type-based unifications of different numbers, and advocate a solution that builds on the introduction of multiplicity as a new grammatical category of <b>programming</b> <b>languages...</b>|$|R
50|$|The SINA <b>programming</b> <b>language</b> is an <b>object</b> {{oriented}} <b>programming</b> <b>language</b> {{which was}} designed to implement the features of composition filters object model. Each SINA program is a collection of classes, each of which can be separated into the implementation and the interface. The first implementation of SINA was for the Smalltalk and ran only in that environment.|$|R
40|$|Data {{parallel}} <b>programming</b> <b>languages</b> offer ease {{of programming}} and debugging and scalability of parallel programs to {{increasing numbers of}} processors. Unfortunately, the usefulness of these languages for non-scientific programmers and loosely coupled parallel machines is currently limited. In this paper, we present the composite tree model which seeks to provide greater flexibility via parallel data types, support for more general, hierachical parallelism, parallel control flow, and efficient execution on loosely coupled, coarse grained parallel machines such as workstation networks. The composite tree model is {{a new model of}} parallel programming based on merging data parallelism with <b>object</b> oriented <b>programming</b> <b>languages,</b> and can be implemented as a small set of extensions to any pure, static typed, <b>object</b> oriented <b>programming</b> <b>language.</b> 1 Introduction Data parallel programming achieves parallelism through the simultaneous execution of the same operation across a set of data [19]. In a [...] ...|$|R
40|$|This paper {{describes}} {{an approach to}} the integration of heterogeneous data management applications. The proposed approach is based on techniques derived from the fields of Object Oriented Databases and <b>Object</b> Oriented <b>Programming</b> <b>Languages.</b> The architecture of a system which implements this approach is also briefly described...|$|R
40|$|In this {{position}} paper, we present an abstraction framework that supports seamless migration of application logic between <b>programming</b> <b>languages.</b> It promotes {{the longevity of}} business rules and permits retargeting of these functions into numerous physical <b>object</b> oriented <b>programming</b> <b>languages.</b> We further demonstrate the framework through its ability to construct console and XML Web Service applications from a single language-neutral XML form...|$|R
50|$|Like other <b>object</b> {{oriented}} <b>programming</b> <b>languages</b> ROOM {{uses the}} concept of classes.Actors are classes which can be instantiated as objects {{several times in the}} system.Of course each instance of an actor class is in its own state and can communicate with other instances of the same (and other) classes.|$|R
50|$|Recently, {{with the}} {{availability}} of massive computing power, {{there has been a}} resurgence of mutation analysis within the computer science community, and work has been done to define methods of applying mutation testing to <b>object</b> oriented <b>programming</b> <b>languages</b> and non-procedural languages such as XML, SMV, and finite state machines.|$|R
40|$|In {{this paper}} we {{introduce}} a new view on roles in <b>Object</b> Oriented <b>programming</b> <b>languages.</b> Our notion {{is based on an}} ontological analysis of social roles and attributes to roles the following properties: first, a role is always associated not only to an object instance playing the role, but also to another object instance which constitutes the context of the role and which we call institution. Second, the definition of a role depends on the definition of the institution which constitutes its context. Third, this second property allows to endow players of roles with powers to modify the state of the institution and of the other roles of the same institution. As an example of this model of roles in <b>Object</b> Oriented <b>programming</b> <b>languages,</b> we introduce a role construct in Java...|$|R
40|$|Abstract [...] -Now a day {{the maximum}} {{percentage}} of {{the people from the}} world of computer programmers are using <b>object</b> oriented <b>programming</b> <b>languages</b> like C++, Java, Eiffel, Dot Net and etc. Why, because these languages are incorporated with some easiness, advanced, re-useful and needful features. And Inheritance is most important portion of any <b>object</b> oriented <b>programming</b> <b>languages</b> that plays vital role to like the language by programmers. Here I am going to discuss some basics problems and their solutions related to a situation of multiple inheritance called Diamond Effect. This problem comes in existence when we use multiple inheritance where one class is inherited by two different sub classes and again these two subclasses are inherited by any single class. Multiple inheritance in <b>object</b> oriented <b>language</b> like C++ is a powerful, but tricky tool, that often leads to problems if not handled carefully. Diamond effect occurs in most of the <b>object</b> oriented <b>languages</b> and each language has some different syntax for coding. In this paper whatever coding is used, will be in the reference of C++...|$|R
40|$|In today's world, Client-Server {{applications}} {{that rely on}} a database on the server as a data store while servicing requests from multiple clients are quite commonplace. Most of these applications use a Relational Database Management System (RDBMS) as their data store while using an <b>object</b> oriented <b>programming</b> <b>language</b> for development. Thi...|$|R
40|$|This is {{the third}} report on TyCO, a (still) {{experimental}} strongly and implicitly typed concurrent <b>object</b> based <b>programming</b> <b>language</b> based on a predicative polymorphic calculus of objects, featuring asynchronous messages, objects, and procedures, together with a predicative polymorphic typing assignment system, assigning monomorphic types to variables and polymorphic types to procedure...|$|R
50|$|Object {{database}} management systems added {{the concept of}} persistence to <b>object</b> <b>programming</b> <b>languages.</b> The early commercial products were integrated with various languages: GemStone (Smalltalk), Gbase (LISP), Vbase (COP) and VOSS (Virtual Object Storage System for Smalltalk). For much of the 1990s, C++ dominated the commercial object {{database management}} market. Vendors added Java in the late 1990s and more recently, C#.|$|R
40|$|Constraints {{provide a}} useful {{technique}} for ensuring that desired properties hold in an application. As a result, {{they have been}} used {{in a wide range of}} applications, including graphical layout, simulation, scheduling, and problem-solving. We describe the design and implementation of an <b>Object</b> Constraint <b>Programming</b> <b>language,</b> an object-oriented language that cleanly integrates constraints with the underlying language in a way that respects encapsulation and standard object-oriented programming techniques, and that runs in browser-based applications. Prior work on <b>Object</b> Constraint <b>Programming</b> <b>languages</b> has relied on modifying the underlying Virtual Machine, but that is not an option for web-based applications, which have become increasingly prominent. In this paper, we present an approach to implementing Ob-ject Constraint Programming without Virtual Machine support, along with an implementation as a JavaScript extension. We demonstrate the resulting language, Babelsberg/JS, on a number of applications an...|$|R
40|$|To reduce {{software}} development and maintenance costs, programmers are increasingly using <b>object</b> oriented <b>programming</b> <b>languages,</b> such as C++, and relying on highly flexible data structures, such as linked lists. <b>Object</b> oriented <b>programming</b> <b>languages</b> provide features that help manage complex software systems, but object oriented programs tend to suffer increased instruction counts due to generalized class implementations {{and many more}} calls to small functions. The use of linked data structures increases programming flexibility by allowing easy addition and deletion of nodes, and by dynamically allocating memory to satisfy applications that use large memory space. However successive elements in linked data structures can potentially be allocated to noncontiguous memory locations, leading to poor spatial locality for list traversals, which may {{increase the number of}} cache misses and reduce performance. This paper evaluates the impact of both the increased instruction overhead and poor spati [...] ...|$|R
