313|274|Public
25|$|Couchbase Server: a persistent, replicated, {{clustered}} distributed <b>object</b> <b>storage</b> system {{compatible with}} memcached protocol.|$|E
25|$|In December 2015, CTERA {{announced}} Cloud Server Data Protection, its storage-as-a-service server {{data protection}} software for enterprise CloudOps. Cloud Server Data Protection protects server {{data on a}} private or virtual private cloud using backup agents for Windows and Linux environments and <b>object</b> <b>storage</b> services through cloud platforms such as Amazon Web Services, Microsoft Azure, IBM Cloud and OpenStack-based clouds.|$|E
2500|$|CTERA Networks is {{a privately}} held {{enterprise}} software company headquartered in New York and Israel. The company has regional {{offices in the}} UK, Italy, France, Spain, Germany, and Australia. [...] CTERA has partnered with companies including Amazon Web Services, Hewlett Packard Enterprise, IBM, and clients include Deutsche Telekom, Banco Santander, AXA and the United States Department of Defense. In October 2016 IBM became a CTERA reseller. IBM's Cloud <b>Object</b> <b>Storage,</b> integrated with the CTERA Enterprise File Services Platform, can be deployed on-premises, in the SoftLayer cloud or in a hybrid on-premises/cloud setup. CTERA was mentioned in Gartner's 2016 Magic Quadrant for Data Center Backup and Recovery Software.|$|E
25|$|As in C, C++ {{supports}} {{four types}} of memory management: static <b>storage</b> duration <b>objects,</b> thread <b>storage</b> duration <b>objects,</b> automatic <b>storage</b> duration <b>objects,</b> and dynamic <b>storage</b> duration <b>objects.</b>|$|R
50|$|Preventive care is the abating of {{potential}} deterioration and {{damage to a}} painting through previously designated policies and procedures surrounding the <b>object's</b> <b>storage</b> and handling.|$|R
5000|$|... {{physical}} <b>storage</b> <b>object</b> identifies free <b>storage</b> {{blocks in}} memory ...|$|R
50|$|Some early incarnations of <b>object</b> <b>storage</b> {{were used}} for archiving, as {{implementations}} were optimized for data services like immutability, not performance. EMC Centera and Hitachi HCP (formerly known as HCAP) are two commonly cited <b>object</b> <b>storage</b> products for archiving. Another example is Quantum Lattus <b>Object</b> <b>Storage</b> Platform.|$|E
5000|$|More recently, global file {{systems have}} emerged that combine cloud or any <b>object</b> <b>storage,</b> {{versioning}} and local caching {{to create a}} single, unified, globally accessible file system that does not rely on redirection to a storage device [...] but serves files from the local cache while maintaining the single file system and all meta data in the <b>object</b> <b>storage.</b> [...] As described in Google's patents, advantages of these global file systems include the ability to scale with the <b>object</b> <b>storage,</b> use snapshots stored in the <b>object</b> <b>storage</b> for versioning to replace backup, and create a centrally managed consolidated storage repository in the <b>object</b> <b>storage.</b>|$|E
50|$|<b>Object</b> <b>storage</b> {{services}} like Amazon S3 and Microsoft Azure Storage, <b>object</b> <b>storage</b> software like Openstack Swift, <b>object</b> <b>storage</b> systems like EMC Atmos, EMC ECS and Hitachi Content Platform, and distributed storage research projects like OceanStore and VISION Cloud are all examples of storage {{that can be}} hosted and deployed with cloud storage characteristics.|$|E
50|$|As another example, the {{software}} which Wikipedia and other Wikimedia Foundation projects use for their underlying infrastructure is a customized LAMP stack with additions such as Linux Virtual Server (LVS) for load balancing and Ceph and Swift for distributed <b>object</b> <b>storages.</b>|$|R
5000|$|MIS Common <b>Object</b> Store (<b>storage</b> {{of users}} rights and reports) ...|$|R
5000|$|... <b>storage</b> claim <b>object</b> limits <b>storage</b> {{that may}} be {{allocated}} by all associated <b>storage</b> resource <b>objects</b> ...|$|R
50|$|MinFS is a FUSE {{driver for}} Amazon S3 {{compatible}} <b>object</b> <b>storage</b> server. MinFS enables legacy applications to use Amazon S3 compatible <b>object</b> <b>storage</b> by mounting the object store onto the file system.|$|E
50|$|<b>Object</b> <b>storage</b> systems allow {{retention}} of {{massive amounts of}} unstructured data. <b>Object</b> <b>storage</b> is used for purposes such as storing photos on Facebook, songs on Spotify, or files in online collaboration services, such as Dropbox.|$|E
5000|$|<b>Object</b> <b>storage</b> {{explicitly}} separates file metadata {{from data}} to support additional capabilities:As opposed to fixed metadata in file systems (filename, creation date, type, etc.), <b>object</b> <b>storage</b> provides for full function, custom, object-level metadata in order to: ...|$|E
40|$|Modern {{applications}} demand {{support for}} {{a large number of}} clients and require large scale storage subsystems. This paper presents a theoretical model of prefetching and caching of <b>storage</b> <b>objects</b> under a parallel storage units architecture. The <b>storage</b> <b>objects</b> are defined as variable sized data blocks and a specific cache area is reserved for data prefetching and caching. An evolutionary algorithm is proposed for identifying the <b>storage</b> <b>objects</b> to be prefetched and cached. The <b>storage</b> <b>object</b> prefetching approach is experimented under certain artificial workloads of requests for a set of storage units and has shown significant performance improvement with respect to request service times, as well as cache and byte hit ratios...|$|R
50|$|Once the {{relationships}} and dependencies amongst the various {{pieces of information}} have been determined, {{it is possible to}} arrange the data into a logical structure which can then be mapped into the <b>storage</b> <b>objects</b> supported by the database management system. In the case of relational databases the <b>storage</b> <b>objects</b> are tables which store data in rows and columns. In an <b>Object</b> database the <b>storage</b> <b>objects</b> correspond directly to the objects used by the Object-oriented programming language used to write the applications that will manage and access the data. The relationships may be defined as attributes of the object classes involved or as methods that operate on the object classes.|$|R
50|$|<b>Objects</b> with {{automatic}} <b>storage</b> are local to the block {{in which they}} were declared and are discarded when the block is exited. Additionally, objects declared with the register storage class may be given higher priority by the compiler for access to registers; although they may not actually be stored in registers, <b>objects</b> with this <b>storage</b> class may not be used with the address-of (&) unary operator. <b>Objects</b> with static <b>storage</b> persist for the program's entire duration. In this way, the same object can be accessed by a function across multiple calls. <b>Objects</b> with allocated <b>storage</b> duration are created and destroyed explicitly with malloc, free, and related functions.|$|R
50|$|<b>Object</b> <b>storage</b> {{also allows}} the {{addressing}} and identification of individual objects {{by more than}} just file name and file path. <b>Object</b> <b>storage</b> adds a unique identifier within a bucket, or across the entire system, to support much larger namespaces and eliminate name collisions.|$|E
50|$|Some large {{internet}} companies {{developed their own}} software when <b>object</b> <b>storage</b> products were not commercially available or use cases were very specific. Facebook famously invented their own <b>object</b> <b>storage</b> software, code-named Haystack, to address their particular massive scale photo management needs efficiently.|$|E
5000|$|More {{general purpose}} <b>object</b> <b>storage</b> systems came to market around 2008. Lured by the {{incredible}} growth of [...] "captive" [...] storage systems within web applications like Yahoo Mail {{and the early}} success of cloud storage, <b>object</b> <b>storage</b> systems promised the scale and capabilities of cloud storage, {{with the ability to}} deploy the system within an enterprise, or at an aspiring cloud storage service provider. Notable examples of <b>object</b> <b>storage</b> systems include NetApp StorageGRID, EMC Atmos, OpenStack Swift, Scality RING, Caringo Swarm (formerly CAStor), Cloudian, OpenIO, and Minio.|$|E
40|$|Abstract: Network {{attached}} {{disk storage}} {{is an independent}} Internet node and provides geographical distribution, mutual identification and exchange of <b>storage</b> <b>objects.</b> The paper describes a method for global identification of <b>storage</b> <b>objects</b> and a structure of object registry. For the identification word-wide unique identifiers are generated by double hash transformation based on the Advanced Encryption Standard (Rijndael) with no collisions. Key words: network attached storage, global identification of <b>storage</b> <b>objects,</b> cryptographic hashin...|$|R
40|$|This paper {{describes}} {{the design of}} the object-oriented storage component of EXODUS, an extensible database manaaement~svstern currently under development at the University of-Wiscon&t. The basic abstraction in the EXODU’S storage system is the <b>storage</b> <b>object,</b> an uninterpmted variable-length m&z & of arbitrary size; higher level abstractions such as records and indices am supported via the <b>storage</b> <b>object</b> abstraction. One of the key design %atums described here is a scheme,for managing large dynamic <b>objects,</b> as <b>storage</b> <b>objects</b> can occupy many disk pages and can grow or s. hrink at arbitrary points. The data structure and algorithmsused to su-port such objects are described, and nerformance results from a ore s-iminary prototype of the EXODUS. large-object management scheme am presented. A scheme for maintainin versions of large objects is also described. We then describe the fi K e structure used in the EXODUS storage system, which provides a mechanism for grouping and sequencing through a set of related <b>storage</b> <b>objects.</b> In addition to object and file management. we discuss the EXODUS approach to buffer management, &ntcurrency control, and recovery, both for small and large objects. 1...|$|R
40|$|Complex {{objects are}} a major advance {{achieved}} in modern database systems (DBS) to provide powerful data modelling capabilities. A complex object is highly structured, containing many dependent or independent subobjects. Most of today's DBS {{are based on the}} traditional two-level DBS architecture consisting of a storage and a logical data model level. In these systems, the structural aspect of a complex object is managed on the data model level, but lacks specific support from the storage level which could enhance overall DBS performance. In this paper, we present the concepts and implementation of the KIOSK <b>storage</b> <b>object</b> server designed to efficiently load complex <b>objects</b> from secondary <b>storage.</b> KIOSK introduces the notion of complex <b>storage</b> <b>objects</b> which facilitates modelling the structural aspect of complex <b>objects</b> at the <b>storage</b> level. KIOSK provides operators to load a complex <b>storage</b> <b>object</b> in its entirety from disk in one access and additionally allows clients to retrieve dynamica [...] ...|$|R
50|$|<b>Object</b> <b>storage</b> (also {{known as}} object-based storage) is a {{computer}} data storage architecture that manages data as objects, as opposed to other storage architectures like file systems which manage data as a file hierarchy and block storage which manages data as blocks within sectors and tracks. Each object typically includes the data itself, a variable amount of metadata, and a globally unique identifier. <b>Object</b> <b>storage</b> can be implemented at multiple levels, including the device level (<b>object</b> <b>storage</b> device), the system level, and the interface level. In each case, <b>object</b> <b>storage</b> seeks to enable capabilities not addressed by other storage architectures, like interfaces that can be directly programmable by the application, a namespace that can span multiple instances of physical hardware, and data management functions like data replication and data distribution at object-level granularity.|$|E
50|$|ServerCentral {{provides}} {{shared and}} dedicated SAN, NAS, cloud, and <b>object</b> <b>storage.</b>|$|E
5000|$|Google Storage - IaaS {{providing}} RESTful online {{file and}} <b>object</b> <b>storage.</b>|$|E
40|$|Because {{they require}} focused visual {{attention}} and explicit user control, current computer interfaces have either limited computer augmentation to highly specialized environments or have necessitated major changes to work practice. “Situated usage history displays, ” devices that indicate the former use of physical objects and surfaces enable convenient {{access to information}} without disruption of existing environments or behavior. Prototype systems for monitoring the usage of handheld <b>objects,</b> <b>storage</b> containers, medication bottles and other devices are presented; underlying technologies for sensing and display are also described. The design space of situated usage history displays is characterize...|$|R
40|$|Recently, {{important}} {{efforts have}} been made to digitize, preserve, describe and index the cultural and scientific heritage all over the world. This project will study interdisciplinary topics that arise during such a process. Multimedia scanning and organizing (for every kind of relevant <b>objects),</b> <b>storage</b> and retrieval methods will be investigated, evaluated and applied. Our aim is to design models and construct prototypes of information systems that should be used in Yugoslav cultural and scientific institutions having in mind that their goals include offering easy access to cultural heritage to large populations of public users, as well as experts...|$|R
40|$|The {{distributed}} object server {{follows the}} client-server model, allows object replication, and uses binary semaphores as a concurrency control measure. Instrumentation of the server under these applications supports several conclusions: client space recovery should be dynamically {{controlled by the}} application, predictively prefetching object replicas yields benefits in restricted circumstances, <b>object</b> migration by <b>storage</b> unit (segment) is not generally suitable where there are many <b>objects</b> per <b>storage</b> unit, and binary semaphores are an expensive concurrency control measure in this environment...|$|R
50|$|EMC Elastic Cloud Storage (ECS), {{formerly}} Project Nile, is an <b>object</b> <b>storage</b> {{software product}} marketed by EMC Corporation. ECS {{was designed to}} adhere to several tenents of <b>object</b> <b>storage,</b> including scalability, data resiliency and {{to take advantage of}} existing or new commodity server hardware in order to manage costs. It is marketed as software-defined storage.|$|E
50|$|Nirvana is virtual <b>object</b> <b>storage</b> {{software}} {{developed and}} maintained by General Atomics.|$|E
5000|$|... #Subtitle level 4: Allocation {{of dynamic}} memory for message and <b>object</b> <b>storage</b> ...|$|E
50|$|LINQ can be {{used both}} against {{relational}} and <b>object</b> data <b>storage,</b> thus providing a bridge between them. It {{can also be used}} as an abstraction layer, allowing to easily switch the underlying database technology.|$|R
40|$|Bounding Volume Hierarchies {{are very}} popular {{structures}} for <b>objects</b> <b>storage</b> of virtual scenes. In this article various OO models of BVH are analysed and described using UML. The first part compares structure of bounding volume hierarchy with inner structure of virtual scene representation. The second part {{is focused on}} relationship between a class hierarchy of scene graph and a class hierarchy of BVH. Analysis of bounding volume hierarchies {{is a part of}} a major project dealing with analysis of computer graphics architectures. Ideas originate from experimental architecture under development. Case study shows how the current OO technology and software engineering may bring distinct architectural and design concepts into computer graphics...|$|R
50|$|Data {{fragmentation}} {{occurs when}} a collection of data in memory is broken up into many pieces that are not close together. It is typically the result of attempting to insert a large <b>object</b> into <b>storage</b> that has already suffered external fragmentation.|$|R
