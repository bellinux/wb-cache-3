5|9|Public
50|$|The {{digital content}} lab <b>of</b> <b>XDC</b> prepares digital content for distribution. It creates the {{different}} versions and sub-titles and performs quality controls. The {{company is the}} first entity to have VPF digital cinema deployment agreements with all the 6 major US studios Warner, Fox, Universal, Paramount, Sony and Disney {{for a total of}} 8,000 digital screens in 22 European countries. Today, XDC has signed VPF deals with exhibitors for about 1,000 screens spread over 11 European countries (Austria, Portugal, Germany, Switzerland, Spain, Belgium, The Netherlands, Hungary, Czech Republic, Slovakia and Poland). XDC has also achieved a global financing of 100 million Euros with Fortis Bank to allow the VPF roll out of 2,000 digital screens in the first phase of its European deployment program. XDC is also responsible for installing and maintaining the equipment, and training operators. XDC is currently in charge of more than 500 screens in 10 European countries (Sweden, Belgium, The Netherlands, Luxembourg, France, Spain, Germany, Austria, Switzerland and Poland) and its aim is to reach 1500 screens, in order to create the first European digital cinema network.|$|E
30|$|The last source <b>of</b> <b>XDC</b> authorizations for a Web site is the DNS. To support {{out-of-band}} delivery, {{we propose}} to place XDC authorizations in TXT resource recordse (RR) in the DNS [28], encoded {{to respect the}} rules of the DNS. Since TXT resource records may be used by many applications, there is a risk that a record received by the browser is not an XDC authorization. In our implementation the client just discarded the RR if it could not interpret it correctly; to minimize unnecessary traffic in the future an application-specific RR could be introduced or a general-purpose “kitchen sink RR” [29] reused if one is implemented.|$|E
30|$|A cookie can {{be viewed}} as a passive data element that interacts with the {{following}} actors: Web sites, the network, the browser, and the user. Traditional cookies are built on a user-centric threat model. The same origin policy assumes that the user is the ultimate owner of a cookie. If the browser and the network are honest, it protects against dishonest (or curious) Web servers that might want to gain unauthorized access to cookies. The cross-domain cookies we propose use the same basic threat model. In addition, secure XDC channels promote secure and confidential exchange <b>of</b> <b>XDC</b> cookies, mitigate against DNS spoofing attacks, and provide an extra layer of protection against Web site impersonation.|$|E
30|$|In {{this paper}} we {{introduced}} a simple authorization model for sharing cookies between disparate DNS domains. Such cookies are written to or read from cross-domain channels (XDC). Both writers and readers are issued XDC authorizations granting appropriate permissions to their holders and binding these permissions cryptographically to the XDC channels’ owners. XDC authorizations may be {{delivered in the}} HTTP stream that carries XDC cookies themselves, or looked up in the DNS. The binding <b>of</b> an <b>XDC</b> authorization to the host presenting it relies on the trustworthiness of the name resolution process and, therefore, may be vulnerable to pharming and other attacks against the DNS. Secure XDC channels allow their owners to indicate that cookies may be shared only across SSL connections; this mitigates against DNS spoofing and ensures security and confidentiality <b>of</b> the <b>XDC</b> cookies in transit.|$|R
30|$|Cross-domain (or XDC) cookies have {{essentially}} the same structure as HTTP cookies currently in use. They still carry name/value pairs and additional management attributes (see Table 1). Instead of the Domain, Path and Port attributes, however, we introduce the XDC Name attribute; it contains the (properly encoded) name <b>of</b> the <b>XDC</b> channel to which the cookie belongs. XDC cookies do not allow access to scripts, so the HttpOnly attribute is not required, either. Finally, the Secure attribute is superseded by the (more resilient) secure flag in the XDC channel certificate.|$|R
30|$|Our headers Xdc-Cookie and Xdc-Set-Cookie {{have the}} same basic {{structure}} as the corresponding headers for traditional cookies. As we explained in Table 2 the traditional headers can even be overloaded to support XDC functionality. Assuming that the payload size {{and the number of}} cross-domain cookies and of traditional cookies will not significantly differ, any additional overhead may come only from the XDC Name attribute. Based on the length <b>of</b> a raw <b>XDC</b> name (160 bits for SHA- 1 -generated names) {{and the fact that we}} use double encoding (base 64 and URL), it can be shown that the average length <b>of</b> an encoded <b>XDC</b> name is 31.6 characters. (In the interest of brevity we omit the calculation.) Comparing Xdc-Set-Cookie to Set-Cookie (which may carry a Domain attribute), and Xdc-Cookie and Cookie (which may not), we get the worst case average difference of 31.6 characters per cookie.|$|R
30|$|Even {{traditional}} cookies remain {{somewhat of}} a mystery to many end users, {{but at least they}} contain the Domain attribute that hints at the cookies’ scope and applicability. Names <b>of</b> <b>XDC</b> cookies, on the other hand, are digests of public keys, and do not contain any information that may be recognized by the users. To mitigate this we suggest that browsers maintain a running log of recent use of all persistent XDC cookies capturing the channel name, the host name of the Web server reading or writing the cookie, the date and time of its last access, the type of access, and, possibly, the value set. This log can be used by administrators and advanced users to analyze XDC access patterns and modify their browsers’ cookie acceptance rules if needed.|$|E
30|$|As {{discussed}} in Section 3 our scheme {{does not support}} authorization revocation. Once granted, an XDC authorization remains valid until it expires, and cannot be withdrawn. In addition, if the XDC owner’s private key is compromised, there is no remedial mechanism in place to migrate {{to the use of}} a new key (and a new XDC). We argue that this risk is acceptable. In the unlikely event that the key is compromised, the owner can generate a new key pair thus creating a new XDC, issue new XDC authorizations, and distribute them to all participating Web servers out-of-band. Servers that read XDC cookies can stop accepting the old cookies right away even if browsers continue to store them (and the old XDC authorizations) until expiration. Since anecdotal evidence suggests that revocations of SSL certificates due to key compromise are extremely rare, we expect that revocations <b>of</b> <b>XDC</b> keys will be infrequent as well. Building a complex infrastructure for such rare events, in our view, is not warranted.|$|E
50|$|Corey (Like A Boss) Hosford is a Formula Drift {{driver for}} team KSport's V8 powered Nissan 350Z since 2012 after earning his Formula D licence {{in his first}} year <b>of</b> driving on <b>XDC</b> (Xtreme Drift Circuit) on team KSport's V8 powered Nissan 240SX.For 2013 season of Formula Drift he teamed up with Chris Forsberg and they have been touring {{together}} since.|$|R
30|$|DPX and XDC {{made the}} {{physical}} tests, analyzed the results, and drafted the manuscript. LJY {{carried out the}} manufacture <b>of</b> the samples. <b>XDC</b> made the optical tests and supplied valuable discussion about the analysis. LC and QQS conceived {{of the study and}} participated in its design and coordination. HLL, PZ, SJD, and DWZ participated {{in the design of the}} study and helped to draft the manuscript. All authors read and approved the final manuscript.|$|R
50|$|Let C be a {{class of}} {{concepts}} and c be a concept (not necessarily in C). Then a specifying set for c w.r.t. C, denoted by S is a partial approximation S of c such that C contains at most one extension to S. If we have observed a specifying set for some concept w.r.t. C, then we have enough information to verify a concept in C with at most one more mind change. The exclusion dimension, denoted by <b>XD(C),</b> <b>of</b> a concept class is the maximum {{of the size of}} the minimum specifying set of c with respect to C, where c is a concept not in C.|$|R
30|$|Similar to CORS, the Cross-Origin Resource Sharing {{mechanism}} {{implemented in}} many browsers [22], our solution uses client-cacheable preflight authorizations which should minimize repeat requests and other XDC-related communication overhead. Preflight requests provide the browser with the Web sites’ XDC authorizations, and also give additional instructions about XDC cookie handling (such as {{the frequency of}} DNS lookups). Since any given Web site is expected to use {{only a small number}} <b>of</b> cross-domain channels, <b>XDC</b> authorizations are fairly small (about 1.5 K), and XDC cookies themselves are only marginally bigger than traditional cookies, the overall solution is lightweight. At a modest cost our solution provides a simple and secure mechanism for cross-domain cookie sharing on the Web.|$|R
30|$|The {{proposed}} scheme has several important properties. First, {{it allows us}} to generate unique channel names with negligible probability <b>of</b> collisions. Second, <b>XDC</b> authorizations provide a simple access control mechanism roughly equivalent to the one currently in use on the Web based on the domain matching rules and the same origin policy. Indeed, a traditional Web client looks at the Domain attribute in a cookie and decides if the communicating Web server’s host name matches it; veracity of the host name is ascertained using the DNS. In our case, host name matching is based on direct comparison of the host name as reported by the DNS and the host name in the XDC authorization. Third, an XDC authorization is unforgeable (with current technologies); it cryptographically binds permissions to the cross-domain channel name which in turn is cryptographically bound to the owner of the channel: only the owner, possessor of the private key, could have signed the authorization. The binding between the owner’s public key and the channel name relies on collision resistance properties of the hash function used to compute the name of the channel. In our experiments we used the SHA- 1 algorithm [39].|$|R
40|$|A {{distributed}} {{constraint satisfaction}} problem (DisCSP) is de-ned {{by a set}} of agents, trying to nd assignments for a set of variables with known domains and subject to secret constraints. They can model applications like auctions, dis-tributed team-making, scheduling, and conguration. Secure multiparty computations (MPC) can pick and reveal randomly one of the solutions of any distributed constraint satisfaction and optimization problem. Our previous algo-rithms are based on an arithmetic circuit for selecting a ran-dom element out of the elements with a given value in a secret array (Silaghi 2004 a). Here we show an improvement based on a very simple and elegant (optimized) version of the in-volved functions and on the usage of CSP solvers to exploit public constraints. The technique can hide the absence of so-lutions. The algorithm proposed here is called MPC-DisCSP 4. Compared to previous techniques, MPC-DisCSP 4 is faster and can hide the absence of solutions. Denition 1 A Distributed CSP is dened by ve sets (A;X;D;C;O). A=fA 1;:::; Ang is a set of agents. X = fx 1;:::; xmg is a set of variables and D = fD 1;:::; Dmg is a set of domains such that xi can take values only from Di = fvi 1;:::; vidig. C = 0 [f 1;:::; cg is a set of con-straints. i involves an ordered subset Xi = fxi 1;:::; xikig of the variables in X, XiX, and constrains the legality of each combination of assignments to the variables in Xi. An assignment is a pair hxi; viki meaning that variable xi is assigned the value vik. Each constraint i, i> 0, is known only by one agent, being the secret of that agent. There may exist c 0 public constraints in C, 0 =f 10;:::; c 00 g. A tuple is an ordered set. The projection of a tuple of assignments over a tuple of variables Xi is denoted jXi. A solution <b>of</b> a DisCSP (<b>X,D,C)</b> is a tuple of assignments with one assignment for each variable in X such that each i 2 C is satised by jXi (written i(jXi)). MPC-DisCSP 4. Figure 1 gives an overview of MPC...|$|R

