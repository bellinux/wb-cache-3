443|2821|Public
5|$|In the Multiple Classification Card Sorting Task, {{children}} are shown cards {{and asked to}} sort them based on two different dimensions (e.g. by color, such as yellow and blue, and <b>object</b> <b>type,</b> such as animals and food) simultaneously into four piles within a matrix (e.g. yellow animals, yellow foods, blue animals and blue foods). This task {{appears to be more}} difficult as research has shown that seven-year-old children were incapable of sorting cards based on the two dimensions simultaneously. These children focused on the two dimensions separately, whereas at the age of eleven, children were capable of sorting cards based on these two dimensions simultaneously. This demonstrates an increase in cognitive flexibility between the ages of seven and eleven.|$|E
25|$|To {{ensure a}} degree of {{isolation}} between sessions without introducing a new <b>object</b> <b>type,</b> the association between processes and sessions is handled by the Security Reference Monitor, as an attribute of a security subject (token), and {{it can only be}} changed while holding special privileges.|$|E
25|$|Object types {{define the}} object {{procedures}} and any data {{specific to the}} object. In this way, the object manager allows Windows NT to be an object-oriented operating system, as object types {{can be thought of}} as polymorphic classes that define objects. Most subsystems, though, with a notable exception in the I/O Manager, rely on the default implementation for all <b>object</b> <b>type</b> procedures.|$|E
5000|$|Various <b>object</b> <b>types</b> are {{commonly}} acknowledged: direct, indirect, and prepositional. These <b>object</b> <b>types</b> {{are illustrated in}} the following table: ...|$|R
50|$|In {{order to}} expose an application's {{geographic}} data with GML, a community or organization creates an XML schema {{specific to the}} application domain of interest (the application schema). This schema describes the <b>object</b> <b>types</b> whose data the community is interested in and which community applications must expose. For example, an application for tourism may define <b>object</b> <b>types</b> including monuments, places of interest, museums, road exits, and viewpoints in its application schema. Those <b>object</b> <b>types</b> in turn reference the primitive <b>object</b> <b>types</b> defined in the GML standard.|$|R
5000|$|Personnel {{management}} systems may dispatch {{different types of}} jobs to different personnel. A [...] algorithm that is given a person <b>object</b> <b>typed</b> as an accountant and a job <b>object</b> <b>typed</b> as engineering rejects the scheduling of that person for that job.|$|R
25|$|Each {{instance}} {{of an object}} that is created stores its name, parameters that are passed to the object creation function, security attributes and a pointer to its <b>object</b> <b>type.</b> The object also contains an object close procedure and a reference count to tell the object manager how many other objects in the system reference that object and thereby determines whether the object can be destroyed when a close request is sent to it. Every named object exists in a hierarchical object namespace.|$|E
25|$|The Object Manager (internal name Ob) is an {{executive}} subsystem that all other executive subsystems, especially system calls, must pass through {{to gain access}} to Windows NT resourcesâ€”essentially making it a resource management infrastructure service. The object manager is used to reduce the duplication of object resource management functionality in other executive subsystems, which could potentially lead to bugs and make development of Windows NT harder. To the object manager, each resource is an object, whether that resource is a physical resource (such as a file system or peripheral) or a logical resource (such as a file). Each object has a structure or <b>object</b> <b>type</b> that the object manager must know about.|$|E
25|$|Ordinarily, when a {{function}} in a derived class overrides {{a function}} in a base class, the function to call {{is determined by the}} type of the object. A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a base class pointer; the decision is therefore put off until runtime. This is called dynamic dispatch. Virtual member functions or methods allow the most specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using virtual function tables. If the <b>object</b> <b>type</b> is known, this may be bypassed by prepending a fully qualified class name before the function call, but in general calls to virtual functions are resolved at run time.|$|E
40|$|Abstt'act In Object Orientation, the Generalisation/Specialisation {{hierarchy}} and the Whole/Part relationship are prevalent classification schemes for <b>object</b> <b>types.</b> This paper presents a new classification scheme for <b>object</b> <b>types,</b> called "existence dependency". Existence dependency captures {{some of the}} interesting semantics that are usually associated {{with the concept of}} aggregation (Part Of relation). In fact, the semantics of existence dependency are hidden in the semantics of the Entity Relationship model, but have never been explicitly named. We will demonstrate how the explicit classification of <b>object</b> <b>types</b> according to the existence dependency relation allows for formal and automatic consistency checking between static and dynamic aspects of <b>object</b> <b>types</b> that goes far beyond mere syntactical consistency. 1...|$|R
40|$|INCOME/STAR is an {{environment}} for the cooperative development of large, distributed information systems. INCOME/STAR supports the conceptual modelling of structural system aspects by the entity relationship model and of dynamic system aspects by high level Petri Nets. This combination provides a powerful concept for the integrated modelling of business processes. In this paper we suggest a new concept for the derivation of complex structured <b>object</b> <b>types</b> {{to be used for}} business process modelling. Complex <b>object</b> <b>types</b> can be interpreted as views on a given global entity relationship scheme. We give rules how to derive such complex <b>object</b> <b>types</b> from the global scheme and represent them as <b>object</b> <b>types</b> in a semantic hierarchy model as well as in an extended ER model. The behaviour of such complex <b>object</b> <b>types</b> within business processes can be described by a new variant of Petri Nets, the so-called Nested Relation/Transition-Nets. (orig.) Available from TIB Hannover: RN 3492 (299) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|R
50|$|FAAC and FAAD2 {{stand for}} Freeware Advanced Audio Coder and Decoder 2 respectively. FAAC {{supports}} audio <b>object</b> <b>types</b> LC, Main and LTP. FAAD2 supports audio <b>object</b> <b>types</b> LC, Main, LTP, SBR and PS. Although FAAD2 is free software, FAAC {{is not free}} software.|$|R
2500|$|Some of the {{features}} that FAAC has are: cross-platform support, [...] "reasonably" [...] fast encoding, support {{for more than one}} [...] "object type" [...] of the AAC format, multi-channel encoding, and support for Digital Radio Mondiale streams. [...] It also supports multi-channel streams, like 5.1. [...] The MPEG-4 object types of the AAC format supported by FAAC are the [...] "Low Complexity" [...] (LC), [...] "Main", and [...] "Long Term Prediction" [...] (LTP). The MPEG-2 AAC profiles supported by FAAC are LC and Main. The SBR and PS object types are not supported, so the HE-AAC and HE-AACv2 profiles are also not supported. The <b>object</b> <b>type</b> [...] "Low Complexity" [...] is the default and also happens to be used in videos meant to be playable for portable players (like Apple's iPod) and used by video-hosting sites (like YouTube).|$|E
5000|$|... type-definition object {{represents}} a software-defined <b>object</b> <b>type</b> ...|$|E
5000|$|Attributes used: role, action ID, <b>object</b> <b>type,</b> amount, {{approval}} limit.|$|E
50|$|As AutoCAD {{has become}} more powerful, {{supporting}} more complex <b>object</b> <b>types,</b> DXF has become less useful. Certain <b>object</b> <b>types,</b> including ACIS solids and regions, are not documented. Other <b>object</b> <b>types,</b> including AutoCAD 2006's dynamic blocks, {{and all of the}} objects specific to the vertical market versions of AutoCAD, are partially documented, but not well enough to allow other developers to support them. For these reasons many CAD applications use the DWG format which can be licensed from Autodesk or non-natively from the Open Design Alliance.|$|R
50|$|Each {{service is}} {{defined in terms of}} an {{information}} model that defines a set of <b>object</b> <b>types</b> that are shared by providers and consumers of the service. Examples of such <b>object</b> <b>types</b> are status parameters, control actions and notification alerts, orbit vectors, schedules, planning requests and software images.|$|R
40|$|We {{show the}} NP-hardness of the satisfiability problem for subtype inequalities between <b>object</b> <b>types</b> built by using {{simultaneously}} both the functional {{and the record}} type constructors, without base types. Earlier research concentrated on the complexity of subtyping either solely functional, or solely record types. In both cases deterministic cubic time algorithms are known. Keywords Functional, record <b>type</b> constructors, partial, <b>object</b> <b>types,</b> type reconstruction problem, subtyping, subsumption, subtype constraints, satisfiability, complexity, NP, PSPACE, NEXPTIME. Contents 1 Introduction 2 1. 1 Partial Types........................... 3 1. 2 <b>Object</b> <b>Types...........................</b> 3 1. 3 Functional Types with Base Subtyping............. 4 1. 4 Contribution of This Paper.................... 4 2 Functional+Record Types 6 3 Proof of the Main Theorem 8 3. 1 Truth Values.................. [...] ...|$|R
5000|$|IfcPropertySet {{represents}} {{a set of}} properties attached to an object occurrence or <b>object</b> <b>type.</b>|$|E
5000|$|F# <b>object</b> <b>type</b> {{definitions}} can be class, struct, interface, enum, or delegate type definitions, {{corresponding to}} the definition forms found in C#. For example, here is a class with a constructor taking a name and age, and declaring two properties./// A simple <b>object</b> <b>type</b> definitiontype Person(name : string, age : int) = member x.Name = name member x.Age = age ...|$|E
50|$|The MPEG-4 Audio Version 2 (ISO/IEC 14496-3:1999/Amd 1:2000) defined new audio object types: the low delay AAC (AAC-LD) <b>object</b> <b>type,</b> bit-sliced {{arithmetic}} coding (BSAC) <b>object</b> <b>type,</b> parametric audio coding using harmonic and individual line plus noise and error resilient (ER) versions of object types. It also defined four new audio profiles: High Quality Audio Profile, Low Delay Audio Profile, Natural Audio Profile and Mobile Audio Internetworking Profile.|$|E
25|$|Some {{languages}} like Perl 6 or C# have {{a unified}} type system. This {{means that all}} C# types including primitive types inherit from a single root <b>object.</b> Every <b>type</b> in C# inherits from the Object class. Java has several primitive types that are not objects. Java provides wrapper <b>object</b> <b>types</b> that exist together with the primitive types so developers can use either the wrapper <b>object</b> <b>types</b> or the simpler non-object primitive types.|$|R
5000|$|Supports the {{following}} <b>object</b> <b>types</b> on Windows 2000 and later ...|$|R
5000|$|Application Designer is {{the core}} tool used to create and {{customize}} PeopleTools-based applications. This tool is used to either connect to the database or app server {{for the purposes of}} creating and updating PeopleTools <b>object</b> <b>types.</b> The following is a brief list of such <b>object</b> <b>types</b> created or modified in Application Designer: ...|$|R
5000|$|Determining the {{appropriate}} metadata needed for each <b>object</b> <b>type</b> {{and how it}} is associated with the objects.|$|E
5000|$|... #Caption: Evolution from MPEG-2 AAC LC (Low Complexity) Profile and MPEG-4 AAC LC <b>Object</b> <b>Type</b> to HE-AACv2 Profile.|$|E
50|$|A {{terminology}} {{model is}} a refinement of a concept system. Within a terminology model the concepts (object types) of a specific problem or subject area are defined by subject matter experts in terms of concept (<b>object</b> <b>type)</b> definitions and definitions of subordinated concepts or characteristics (properties). Besides object types, the terminology model allows defining hierarchical classifications, definitions for <b>object</b> <b>type</b> and property behavior and definition of casual relations.|$|E
5000|$|So, <b>objects</b> and <b>types</b> {{and these}} {{relations}} {{are used to}} express formulae in the theory. The following styles of judgements are used to create new <b>objects,</b> <b>types</b> and relations from existing ones: ...|$|R
5000|$|The MPEG-4 Part 3 {{standard}} (MPEG-4 Audio) defined various new compression tools (a.k.a. Audio <b>Object</b> <b>Types)</b> {{and their}} usage in brand new profiles. AAC {{is not used}} {{in some of the}} MPEG-4 Audio profiles. The MPEG-2 Part 7 AAC LC profile, AAC Main profile and AAC SSR profile are combined with Perceptual Noise Substitution and defined in the MPEG-4 Audio standard as Audio <b>Object</b> <b>Types</b> (under the name AAC LC, AAC Main and AAC SSR). These are combined with other <b>Object</b> <b>Types</b> in MPEG-4 Audio profiles. Here is a list of some audio profiles defined in the MPEG-4 standard: ...|$|R
5000|$|Converters - {{allowing}} {{custom code}} conversions between database and <b>object</b> <b>types.</b>|$|R
5000|$|MPEG-4 Audio {{includes}} {{a system for}} handling {{a diverse group of}} audio formats in a uniform manner. Each format is assigned a unique Audio <b>Object</b> <b>Type</b> to represent it. [...] <b>Object</b> <b>Type</b> is used to distinguish between different coding methods. It directly determines the MPEG-4 tool subset required to decode a specific object. The MPEG-4 profiles are based on the object types and each profile supports different list of object types.|$|E
5000|$|Or, how a noun concept (<b>object</b> <b>type)</b> may {{be defined}} in terms of other object types and fact types e.g.|$|E
5000|$|In {{computer}} security, OIDs {{serve to}} name almost every <b>object</b> <b>type</b> in X.509 certificates, such as components of Distinguished Names, CPSs, etc.|$|E
5000|$|FCO-IM uses a {{very simple}} and small set of meta-concepts, by abolishing the {{unnecessary}} distinction between fact <b>types</b> and <b>object</b> types: all <b>object</b> <b>types</b> are fact types as well. In other words: <b>object</b> <b>types</b> are not modeled independently from the communication, but as inextricable parts of the communication itself; FCO-IM never leaves the communication domain.|$|R
40|$|The {{concepts}} of implementation and extension complexities {{were developed in}} connection with an object oriented reengineering of a legacy CAD system [KA 97]. These concepts consider a software system as an implementation {{of a number of}} different algorithms. Ideally, an algorithm in an object oriented (O-O) system is implemented by a single method that only processes data in its own object. Such an algorithm is desirable because it cannot cause coupling between different objects. It is possible to design and test the method that implements such an algorithm without knowing anything about the other <b>object</b> <b>types</b> (classes). The costs of implementing and testing such an algorithm are therefore usually modest. Higher implementation and testing costs may be expected in algorithms that process data in a number of objects belonging to different <b>object</b> <b>types.</b> The reason is that the implementers must have the data structures of these different <b>object</b> <b>types</b> in their mind while implementing the algorithm. Furthermore, an algorithm involving different <b>object</b> <b>types</b> will typically employ a number of different methods in these different <b>object</b> <b>types.</b> The implementers must therefore also consider all of these different method...|$|R
50|$|BAPIs enable {{access to}} SAP {{functions}} across formal, stable and dialog-free interfaces. These interfaces {{can be used}} by external applications developed by customers and complementary software partners as well as by other SAP applications. Defined as API methods of SAP Business <b>Object</b> <b>Types,</b> these <b>object</b> <b>types</b> are used within the Business Framework to enable object-based communication between components.|$|R
